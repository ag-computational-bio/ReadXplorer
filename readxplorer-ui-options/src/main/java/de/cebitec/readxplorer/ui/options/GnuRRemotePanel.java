/*
 * Copyright (C) 2017 Patrick Blumenkamp<patrick.blumenkamp@computational.bio.uni-giessen.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.cebitec.readxplorer.ui.options;

import de.cebitec.readxplorer.api.constants.RServe;
import de.cebitec.readxplorer.ui.options.inputverifier.PasswordInputVerifier;
import de.cebitec.readxplorer.ui.options.inputverifier.PortInputVerifier;
import de.cebitec.readxplorer.ui.options.inputverifier.UsernameInputVerifier;
import de.cebitec.readxplorer.utils.PasswordStore;
import java.util.prefs.Preferences;


/**
 *
 * @author Patrick
 * Blumenkamp<patrick.blumenkamp@computational.bio.uni-giessen.de>
 */
public class GnuRRemotePanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;

    private boolean passwordChanged = false;


    /** Creates new form GnuRRemotePanel */
    public GnuRRemotePanel() {
        initComponents();
        warningMessage.setText( "" );
        rServePort.setInputVerifier( new PortInputVerifier( warningMessage ) );
        usernameTextField.setInputVerifier( new UsernameInputVerifier( warningMessage ) );
        passwordTextField.setInputVerifier( new PasswordInputVerifier( warningMessage ) );
    }


    void load( Preferences pref, String defaultRserveHost, int defaultRservePort ) {
        rServeHost.setText( pref.get( RServe.RSERVE_REMOTE_HOST, defaultRserveHost ) );
        rServePort.setText( String.valueOf( pref.getInt( RServe.RSERVE_REMOTE_PORT, defaultRservePort ) ) );
        boolean authSelected = pref.getBoolean( RServe.RSERVE_REMOTE_USE_AUTH, false );
        if( authSelected ) {
            useAuthCheckBox.setSelected( true );
            usernameTextField.setText( pref.get( RServe.RSERVE_REMOTE_USER, "" ) );
            passwordTextField.setText( "xxxxxxxx" );
            useAuthCheckboxSelected();
        }
    }


    void store( Preferences pref ) {
        pref.put( RServe.RSERVE_REMOTE_HOST, rServeHost.getText() );
        pref.putInt( RServe.RSERVE_REMOTE_PORT, Integer.parseInt( rServePort.getText() ) );
        if( useAuthCheckBox.isSelected() ) {
            pref.putBoolean( RServe.RSERVE_REMOTE_USE_AUTH, true );
            pref.put( RServe.RSERVE_REMOTE_USER, usernameTextField.getText() );
            if( passwordChanged ) {
                PasswordStore.save( RServe.RSERVE_REMOTE_PASSWORD, passwordTextField.getPassword(), "" );
                passwordChanged = false;
            }
        } else {
            pref.remove( RServe.RSERVE_REMOTE_USER );
            PasswordStore.delete( RServe.RSERVE_REMOTE_PASSWORD );
        }
    }


    /** This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rserveHostLabel = new javax.swing.JLabel();
        rServeHost = new javax.swing.JTextField();
        rservePortLabel = new javax.swing.JLabel();
        rServePort = new javax.swing.JTextField();
        warningMessage = new javax.swing.JLabel();
        useAuthCheckBox = new javax.swing.JCheckBox();
        usernameLabel = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        passwordTextField = new javax.swing.JPasswordField();
        passwordLabel = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(rserveHostLabel, org.openide.util.NbBundle.getMessage(GnuRRemotePanel.class, "GnuRRemotePanel.rserveHostLabel.text")); // NOI18N

        rServeHost.setText(org.openide.util.NbBundle.getMessage(GnuRRemotePanel.class, "GnuRRemotePanel.rServeHost.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(rservePortLabel, org.openide.util.NbBundle.getMessage(GnuRRemotePanel.class, "GnuRRemotePanel.rservePortLabel.text")); // NOI18N

        rServePort.setText(org.openide.util.NbBundle.getMessage(GnuRRemotePanel.class, "GnuRRemotePanel.rServePort.text")); // NOI18N

        warningMessage.setForeground(new java.awt.Color(255, 0, 0));
        org.openide.awt.Mnemonics.setLocalizedText(warningMessage, org.openide.util.NbBundle.getMessage(GnuRRemotePanel.class, "GnuRRemotePanel.warningMessage.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(useAuthCheckBox, org.openide.util.NbBundle.getMessage(GnuRRemotePanel.class, "GnuRRemotePanel.useAuthCheckBox.text")); // NOI18N
        useAuthCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useAuthCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(usernameLabel, org.openide.util.NbBundle.getMessage(GnuRRemotePanel.class, "GnuRRemotePanel.usernameLabel.text")); // NOI18N

        usernameTextField.setText(org.openide.util.NbBundle.getMessage(GnuRRemotePanel.class, "GnuRRemotePanel.usernameTextField.text")); // NOI18N
        usernameTextField.setEnabled(false);

        passwordTextField.setText(org.openide.util.NbBundle.getMessage(GnuRRemotePanel.class, "GnuRRemotePanel.passwordTextField.text")); // NOI18N
        passwordTextField.setEnabled(false);
        passwordTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                passwordTextFieldFocusGained(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(passwordLabel, org.openide.util.NbBundle.getMessage(GnuRRemotePanel.class, "GnuRRemotePanel.passwordLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rServeHost)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rServePort, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(warningMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(153, 153, 153))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rserveHostLabel)
                            .addComponent(rservePortLabel)
                            .addComponent(useAuthCheckBox)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(usernameLabel)
                                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(passwordLabel)
                                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rserveHostLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rServeHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rservePortLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rServePort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(warningMessage))
                .addGap(18, 18, 18)
                .addComponent(useAuthCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(passwordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(74, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void useAuthCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useAuthCheckBoxActionPerformed
        useAuthCheckboxSelected();
    }//GEN-LAST:event_useAuthCheckBoxActionPerformed


    private void useAuthCheckboxSelected() {
        passwordTextField.setEnabled( useAuthCheckBox.isSelected() );
        usernameTextField.setEnabled( useAuthCheckBox.isSelected() );
    }

    private void passwordTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordTextFieldFocusGained
        passwordTextField.setText( "" );
        passwordChanged = true;
    }//GEN-LAST:event_passwordTextFieldFocusGained



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JTextField rServeHost;
    private javax.swing.JTextField rServePort;
    private javax.swing.JLabel rserveHostLabel;
    private javax.swing.JLabel rservePortLabel;
    private javax.swing.JCheckBox useAuthCheckBox;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTextField;
    private javax.swing.JLabel warningMessage;
    // End of variables declaration//GEN-END:variables
}
