/*
 * Copyright (C) 2017 Patrick Blumenkamp<patrick.blumenkamp@computational.bio.uni-giessen.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.cebitec.readxplorer.ui.options;

import de.cebitec.readxplorer.api.constants.RServe;
import de.cebitec.readxplorer.ui.options.inputverifier.PasswordInputVerifier;
import de.cebitec.readxplorer.ui.options.inputverifier.PortInputVerifier;
import de.cebitec.readxplorer.ui.options.inputverifier.ScriptInputVerifier;
import de.cebitec.readxplorer.ui.options.inputverifier.UsernameInputVerifier;
import de.cebitec.readxplorer.utils.PasswordStore;
import java.util.prefs.Preferences;


/**
 *
 * @author Patrick
 * Blumenkamp<patrick.blumenkamp@computational.bio.uni-giessen.de>
 */
public class GnuRStartupScriptPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;

    private boolean passwordChanged = false;


    /** Creates new form GnuRStartupScriptPanel */
    public GnuRStartupScriptPanel() {
        initComponents();
        warningMessage.setText( "" );
        rServePort.setInputVerifier( new PortInputVerifier( warningMessage ) );
        rServeStartupScript.setInputVerifier( new ScriptInputVerifier( warningMessage ) );
        usernameTextField.setInputVerifier( new UsernameInputVerifier( warningMessage ) );
        passwordTextField.setInputVerifier( new PasswordInputVerifier( warningMessage ) );
    }


    void load( Preferences pref, int defaultRservePort ) {
        rServePort.setText( String.valueOf( pref.getInt( RServe.RSERVE_STARTUP_SCRIPT_PORT, defaultRservePort ) ) );
        boolean defaultScriptSelected = pref.getBoolean( RServe.RSERVE_STARTUP_SCRIPT_USE_DEFAULT_SCRIPT, true );
        if( !defaultScriptSelected ) {
            rServeStartupScript.setText( pref.get( RServe.RSERVE_STARTUP_SCRIPT_PATH, "" ) );
            useStandardStartupScript.setSelected( false );
            useStandardStartupScriptSelected();
        } else {
            useStandardStartupScript.setSelected( true );
            useStandardStartupScriptSelected();
            rServeStartupScript.setText( "" );
        }
        boolean authSelected = pref.getBoolean( RServe.RSERVE_STARTUP_SCRIPT_USE_AUTH, false );
        if( authSelected ) {
            useAuthCheckBox.setSelected( true );
            usernameTextField.setText( pref.get( RServe.RSERVE_STARTUP_SCRIPT_USER, "" ) );
            passwordTextField.setText( "xxxxxxxx" );
            useAuthCheckboxSelected();
        }
    }


    void store( Preferences pref ) {
        if( !useStandardStartupScript.isSelected() ) {
            pref.put( RServe.RSERVE_STARTUP_SCRIPT_PATH, rServeStartupScript.getText() );
            pref.putBoolean( RServe.RSERVE_STARTUP_SCRIPT_USE_DEFAULT_SCRIPT, false);
        } else {
            pref.remove( RServe.RSERVE_STARTUP_SCRIPT_PATH);
            pref.putBoolean( RServe.RSERVE_STARTUP_SCRIPT_USE_DEFAULT_SCRIPT, true);
        }
        pref.putInt( RServe.RSERVE_STARTUP_SCRIPT_PORT, Integer.parseInt( rServePort.getText() ) );
        if( useAuthCheckBox.isSelected() ) {
            pref.putBoolean( RServe.RSERVE_STARTUP_SCRIPT_USE_AUTH, true );
            pref.put( RServe.RSERVE_STARTUP_SCRIPT_USER, usernameTextField.getText() );
            if( passwordChanged ) {
                PasswordStore.save( RServe.RSERVE_STARTUP_SCRIPT_PASSWORD, passwordTextField.getPassword(), "" );
                passwordChanged = false;
            }
        } else {
            pref.remove( RServe.RSERVE_STARTUP_SCRIPT_USER );
            PasswordStore.delete( RServe.RSERVE_STARTUP_SCRIPT_PASSWORD );
        }
    }


    /** This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startupScriptLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        rServePort = new javax.swing.JTextField();
        warningMessage = new javax.swing.JLabel();
        useAuthCheckBox = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        passwordTextField = new javax.swing.JPasswordField();
        rServeStartupScript = new javax.swing.JTextField();
        useStandardStartupScript = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(startupScriptLabel, org.openide.util.NbBundle.getMessage(GnuRStartupScriptPanel.class, "GnuRStartupScriptPanel.startupScriptLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(GnuRStartupScriptPanel.class, "GnuRStartupScriptPanel.jLabel5.text")); // NOI18N

        rServePort.setText(org.openide.util.NbBundle.getMessage(GnuRStartupScriptPanel.class, "GnuRStartupScriptPanel.rServePort.text")); // NOI18N

        warningMessage.setForeground(new java.awt.Color(255, 0, 0));
        org.openide.awt.Mnemonics.setLocalizedText(warningMessage, org.openide.util.NbBundle.getMessage(GnuRStartupScriptPanel.class, "GnuRStartupScriptPanel.warningMessage.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(useAuthCheckBox, org.openide.util.NbBundle.getMessage(GnuRStartupScriptPanel.class, "GnuRStartupScriptPanel.useAuthCheckBox.text")); // NOI18N
        useAuthCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useAuthCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(GnuRStartupScriptPanel.class, "GnuRStartupScriptPanel.jLabel7.text")); // NOI18N

        usernameTextField.setText(org.openide.util.NbBundle.getMessage(GnuRStartupScriptPanel.class, "GnuRStartupScriptPanel.usernameTextField.text")); // NOI18N
        usernameTextField.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(GnuRStartupScriptPanel.class, "GnuRStartupScriptPanel.jLabel8.text")); // NOI18N

        passwordTextField.setText(org.openide.util.NbBundle.getMessage(GnuRStartupScriptPanel.class, "GnuRStartupScriptPanel.passwordTextField.text")); // NOI18N
        passwordTextField.setEnabled(false);
        passwordTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                passwordTextFieldFocusGained(evt);
            }
        });

        rServeStartupScript.setText(org.openide.util.NbBundle.getMessage(GnuRStartupScriptPanel.class, "GnuRStartupScriptPanel.rServeStartupScript.text")); // NOI18N
        rServeStartupScript.setEnabled(false);

        useStandardStartupScript.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(useStandardStartupScript, org.openide.util.NbBundle.getMessage(GnuRStartupScriptPanel.class, "GnuRStartupScriptPanel.useStandardStartupScript.text")); // NOI18N
        useStandardStartupScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useStandardStartupScriptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startupScriptLabel)
                    .addComponent(rServeStartupScript)
                    .addComponent(useStandardStartupScript)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rServePort, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(warningMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(153, 153, 153))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel5)
                    .addComponent(useAuthCheckBox))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startupScriptLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useStandardStartupScript)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rServeStartupScript, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rServePort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(warningMessage))
                .addGap(18, 18, 18)
                .addComponent(useAuthCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void useAuthCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useAuthCheckBoxActionPerformed
        useAuthCheckboxSelected();
    }//GEN-LAST:event_useAuthCheckBoxActionPerformed


    private void useAuthCheckboxSelected() {
        usernameTextField.setEnabled( useAuthCheckBox.isSelected() );
        passwordTextField.setEnabled( useAuthCheckBox.isSelected() );
    }

    private void passwordTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordTextFieldFocusGained
        passwordTextField.setText( "" );
        passwordChanged = true;
    }//GEN-LAST:event_passwordTextFieldFocusGained

    private void useStandardStartupScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useStandardStartupScriptActionPerformed
        useStandardStartupScriptSelected();
    }//GEN-LAST:event_useStandardStartupScriptActionPerformed


    private void useStandardStartupScriptSelected() {
        rServeStartupScript.setEnabled( !useStandardStartupScript.isSelected() );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JTextField rServePort;
    private javax.swing.JTextField rServeStartupScript;
    private javax.swing.JLabel startupScriptLabel;
    private javax.swing.JCheckBox useAuthCheckBox;
    private javax.swing.JCheckBox useStandardStartupScript;
    private javax.swing.JTextField usernameTextField;
    private javax.swing.JLabel warningMessage;
    // End of variables declaration//GEN-END:variables


}
