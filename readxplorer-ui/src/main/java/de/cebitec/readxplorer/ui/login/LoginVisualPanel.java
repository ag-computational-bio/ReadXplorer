/*
 * Copyright (C) 2014 Institute for Bioinformatics and Systems Biology, University Giessen, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.cebitec.readxplorer.ui.login;


import de.cebitec.readxplorer.api.constants.Paths;
import de.cebitec.readxplorer.utils.filechooser.ReadXplorerFileChooser;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.JPanel;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.NbBundle;
import org.openide.util.NbPreferences;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * @author ddopmeier?, jstraube?, rhilker
 */
public final class LoginVisualPanel extends JPanel {

    private static final Logger LOG = LoggerFactory.getLogger( LoginVisualPanel.class.getName() );

    private static final long serialVersionUID = 1L;

    private String defaultDb;


    /**
     * Creates new form LoginVisualPanel
     */
    public LoginVisualPanel() {
        this.initComponents();
        this.setLoginData();
        databaseField.setText( defaultDb );
    }


    @Override
    public String getName() {
        return NbBundle.getMessage( LoginVisualPanel.class, "LoginVisualPanel.name" );
    }


    private void setLoginData() {
        Preferences prefs = Preferences.userNodeForPackage( LoginProperties.class );
        defaultDb = prefs.get( LoginProperties.LOGIN_DATABASE, null );
    }


    public Map<String, String> getLoginData() {
        Map<String, String> loginData = new HashMap<>();

        String database = databaseField.getText();
        if( database.endsWith( ".h2.db" ) ) {
            database = database.replace( ".h2.db", "" );
        }
        if( database.endsWith( ".h2" ) ) {
            database = database.replace( ".h2", "" );
        }

        loginData.put( LoginWizardPanel.PROP_DATABASE, database );

        // save login data if desired
        saveLoginData( loginData );

        return loginData;
    }


    private void saveLoginData( Map<String, String> loginData ) {
        Preferences prefs = Preferences.userNodeForPackage( LoginVisualPanel.class );

        prefs.put( LoginProperties.LOGIN_DATABASE, saveDataCheckBox.isSelected() ? loginData.get( LoginWizardPanel.PROP_DATABASE ) : "" );
        try {
            prefs.flush();
        } catch( BackingStoreException ex ) {
            LOG.error( null, ex );
        }

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        databaseLabel = new javax.swing.JLabel();
        databaseField = new javax.swing.JTextField();
        saveDataCheckBox = new javax.swing.JCheckBox();
        dbChooseButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(databaseLabel, org.openide.util.NbBundle.getMessage(LoginVisualPanel.class, "LoginVisualPanel.databaseLabel.text")); // NOI18N

        databaseField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseFieldActionPerformed(evt);
            }
        });

        saveDataCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(saveDataCheckBox, org.openide.util.NbBundle.getMessage(LoginVisualPanel.class, "LoginVisualPanel.saveDataCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(dbChooseButton, org.openide.util.NbBundle.getMessage(LoginVisualPanel.class, "LoginVisualPanel.dbChooseButton.text")); // NOI18N
        dbChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbChooseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(saveDataCheckBox)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(databaseLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(databaseField, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dbChooseButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(databaseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dbChooseButton)
                    .addComponent(databaseLabel))
                .addGap(18, 18, 18)
                .addComponent(saveDataCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void dbChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbChooseButtonActionPerformed
        ReadXplorerFileChooser fileChooser = new ReadXplorerFileChooser( new String[]{ "db" }, "db files" ) {
            private static final long serialVersionUID = 1L;


            @Override
            public void save( String fileLocation ) {
                NotifyDescriptor nd = new NotifyDescriptor.Message( NbBundle.getMessage( LoginVisualPanel.class, "MSG_LoginVisualPanel.warning.database", fileLocation ), NotifyDescriptor.WARNING_MESSAGE );
                DialogDisplayer.getDefault().notify( nd );
                databaseField.setText( fileLocation );
            }


            @Override
            public void open( String fileLocation ) {
                try { //store current directory
                    NbPreferences.forModule( Object.class ).put( Paths.READXPLORER_DATABASE_DIRECTORY, this.getCurrentDirectory().getCanonicalPath() );
                } catch( IOException ex ) {
                    LOG.warn( Paths.READXPLORER_DATABASE_DIRECTORY + " could not be stored" );
                }
                databaseField.setText( fileLocation );
            }


        };
        fileChooser.setDirectory( NbPreferences.forModule( Object.class ).get( Paths.READXPLORER_DATABASE_DIRECTORY, null ) );

        Preferences prefs2 = Preferences.userNodeForPackage( LoginVisualPanel.class );
        String path = prefs2.get( LoginProperties.LOGIN_DATABASE, null );
        if( path != null ) {
            fileChooser.setCurrentDirectory( new File( path ) );
        }

        fileChooser.openFileChooser( ReadXplorerFileChooser.CUSTOM_DIALOG );
}//GEN-LAST:event_dbChooseButtonActionPerformed

    private void databaseFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseFieldActionPerformed
        // add your handling code here:
    }//GEN-LAST:event_databaseFieldActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField databaseField;
    private javax.swing.JLabel databaseLabel;
    private javax.swing.JButton dbChooseButton;
    private javax.swing.JCheckBox saveDataCheckBox;
    // End of variables declaration//GEN-END:variables


    /**
     * Updates the choose button text.
     * <p>
     * @param chooseButtonText
     */
    public void setChooseButtonText( String chooseButtonText ) {
        this.dbChooseButton.setText( chooseButtonText );
    }


}
