/*
 * Copyright (C) 2014 Institute for Bioinformatics and Systems Biology, University Giessen, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.cebitec.readxplorer.ui.datavisualisation.trackviewer;


import de.cebitec.readxplorer.api.constants.Colors;
import de.cebitec.readxplorer.api.constants.GUI;
import de.cebitec.readxplorer.databackend.connector.TrackConnector;
import de.cebitec.readxplorer.ui.datavisualisation.basepanel.LegendAndOptionsProvider;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.prefs.PreferenceChangeEvent;
import java.util.prefs.PreferenceChangeListener;
import java.util.prefs.Preferences;
import javax.swing.BoxLayout;
import javax.swing.JCheckBox;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.text.DefaultFormatter;
import org.openide.util.NbPreferences;


/**
 * Panel containing the display options for a track viewer like automatic
 * scaling and normalizing the coverage.
 * <p>
 * @author jstraube, rhilker
 */
public class TrackOptionsPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;

    private final TrackViewer trackViewer;
    private final Preferences pref = NbPreferences.forModule( Object.class );


    /**
     * Creates a new Panel containing the display options for a track viewer
     * like automatic scaling and normalizing the coverage.
     * <p>
     * @param parentTrackViewer parent track viewer
     */
    public TrackOptionsPanel( TrackViewer parentTrackViewer ) {
        this.trackViewer = parentTrackViewer;
        this.setLayout( new BoxLayout( this, BoxLayout.Y_AXIS ) );
        this.setBackground(Colors.LEGEND_BACKGROUND );
        this.initOtherComponents();

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables


    /**
     * Initializes all components of the panel.
     */
    private void initOtherComponents() {

        LegendAndOptionsProvider.createHeader( "General:" );
        this.createQualityFilter();
        this.createScalingOption();
        this.createNormalizationOption();

        this.updateUI();
    }


    /**
     * Creates the quality filter.
     */
    private void createQualityFilter() {
        JPanel qualityPanel = LegendAndOptionsProvider.createStandardPanel();
        LegendAndOptionsProvider.createMappingQualityFilter( trackViewer, qualityPanel );
        this.add( qualityPanel );
    }


    /**
     * Creates a check box for automatic scaling of the coverage.
     */
    private void createScalingOption() {
        JPanel generalPanel = LegendAndOptionsProvider.createStandardPanel();
        final JCheckBox scaleBox = LegendAndOptionsProvider.createStandardCheckBox( "Automatic scaling enabled" );
        scaleBox.setSelected( pref.getBoolean( GUI.VIEWER_AUTO_SCALING, false ) );

        //automatic scaling enabled event
        scaleBox.addActionListener( new ActionListener() {

            @Override
            public void actionPerformed( ActionEvent e ) {
                JCheckBox scaleBox = (JCheckBox) e.getSource();
                trackViewer.setAutomaticScaling( scaleBox.isSelected() );
            }


        } );
        //preference change listener for updating the check box
        pref.addPreferenceChangeListener( new PreferenceChangeListener() {

            @Override
            public void preferenceChange( PreferenceChangeEvent evt ) {
                if( evt.getKey().equals( GUI.VIEWER_AUTO_SCALING ) ) {
                    scaleBox.setSelected( pref.getBoolean( GUI.VIEWER_AUTO_SCALING, false ) );
                }
            }


        } );
        generalPanel.add( scaleBox, BorderLayout.WEST );
        this.add( generalPanel );
    }


    /**
     * Creates the normalization options.
     */
    private void createNormalizationOption() {
        JLabel header2 = LegendAndOptionsProvider.createLabel( "Normalization", Font.BOLD );
        final JPanel headerPanel2 = LegendAndOptionsProvider.createStandardPanel();
        headerPanel2.add( header2, BorderLayout.CENTER );
        headerPanel2.setPreferredSize( new Dimension( headerPanel2.getPreferredSize().width, headerPanel2.getPreferredSize().height + 2 ) );
        this.add( headerPanel2 );

        if( trackViewer.isTwoTracks() && !trackViewer.isCombineTracks() ) {
            int k = 0;
            for( String name : trackViewer.getTrackCon().getAssociatedTrackNames() ) {
                this.createNormalizationEntry( name, k++ );
            }
        } else if( trackViewer.isTwoTracks() ) {
            this.createNormalizationEntry( "All tracks: ", 0 );
        } else {
            this.createNormalizationEntry( "", 0 );
        }
    }


    /**
     * Creates an entry with a descriptive label and the normalization
     * functionality for one track.
     * <p>
     * @param name  the name of the track
     * @param index the index of the track in the trackId array
     */
    private void createNormalizationEntry( String name, int index ) {
        JPanel trackPanel = new JPanel();
        trackPanel.setLayout( new BoxLayout( trackPanel, BoxLayout.X_AXIS ) );

        if( !name.isEmpty() ) {
            this.createNormalizationLabel( trackPanel, name );
        }

        final JCheckBox log = LegendAndOptionsProvider.createStandardCheckBox( "Log2" );
        final JCheckBox factor = LegendAndOptionsProvider.createStandardCheckBox( "Factor" );

        final JSpinner scaleFactorSpinner = new JSpinner();
        scaleFactorSpinner.setMaximumSize( new Dimension( 50, 20 ) );
        scaleFactorSpinner.setPreferredSize( new Dimension( 50, 20 ) );

        TrackConnector trackCon = trackViewer.getTrackCon();
        final int trackID = trackCon.getTrackIds().get( index );

        //scaleFactor init and action
        scaleFactorSpinner.setMaximumSize( new Dimension( 60, 20 ) );
        scaleFactorSpinner.setModel( new SpinnerNumberModel( 1.0, 0, 10, 0.1 ) );

        final NormalizationSettings ns;
        if( trackViewer.getNormalizationSettings() == null ) {
            ns = setNewNormalizationSettings();
            trackViewer.setNormalizationSettings( ns );
        } else {
            ns = trackViewer.getNormalizationSettings();
            boolean isLogNorm = ns.getIsLogNorm( trackID );
            boolean hasNorm = ns.getHasNormFac( trackID );
            scaleFactorSpinner.setValue( ns.getFactors( trackID ) );
            log.setSelected( isLogNorm );
            factor.setSelected( hasNorm && !isLogNorm );
        }

        JSpinner.NumberEditor editor = (JSpinner.NumberEditor) scaleFactorSpinner.getEditor();
        final JFormattedTextField txt = editor.getTextField();
        ((DefaultFormatter) txt.getFormatter()).setAllowsInvalid( false );
        DecimalFormat format = editor.getFormat();
        format.setMinimumFractionDigits( 1 );

        scaleFactorSpinner.addChangeListener( new ChangeListener() {

            @Override
            public void stateChanged( ChangeEvent e ) {

                JSpinner spinn = (JSpinner) e.getSource();
                double fac = (Double) spinn.getValue();
                NormalizationSettings currentNS = trackViewer.getNormalizationSettings();
                currentNS.setFactors( fac, trackID );
                trackViewer.setNormalizationSettings( currentNS );
                if( factor.isSelected() ) {
                    trackViewer.normalizationValueChanged();
                }
            }


        } );

        factor.addActionListener( new ActionListener() {

            @Override
            public void actionPerformed( ActionEvent e ) {
                JCheckBox check = (JCheckBox) e.getSource();
                boolean isLogNorm = check.isSelected();
                boolean isSel = isLogNorm | log.isSelected();

                double fac = (Double) scaleFactorSpinner.getValue();
                NormalizationSettings currentNS = trackViewer.getNormalizationSettings();
                currentNS.setFactors( fac, trackID );
                currentNS.setIsLogNorm( isSel & !isLogNorm, trackID );
                currentNS.setHasNormFac( isSel, trackID );
                trackViewer.setNormalizationSettings( currentNS );
                trackViewer.normalizationValueChanged();
                log.setSelected( isSel & !isLogNorm );
            }


        } );


        //log2 init and action
        log.addActionListener( new ActionListener() {

            @Override
            public void actionPerformed( ActionEvent e ) {

                JCheckBox check = (JCheckBox) e.getSource();
                boolean logIsSel = check.isSelected();
                boolean isSel = logIsSel | factor.isSelected();
                factor.setSelected( isSel & !logIsSel );
                NormalizationSettings currentNS = trackViewer.getNormalizationSettings();
                currentNS.setHasNormFac( isSel, trackID );
                currentNS.setIsLogNorm( logIsSel, trackID );
                trackViewer.setNormalizationSettings( currentNS );
                trackViewer.normalizationValueChanged();
            }


        } );

        trackPanel.add( log );
        trackPanel.add( factor );
        trackPanel.add( scaleFactorSpinner );
        this.add( trackPanel );
    }


    /**
     * Creates and adds a label with a name to a track option panel.
     * <p>
     * @param trackPanel the track option panel to which the label shall be
     *                   added
     * @param name       the name of the tracks to add to the panel
     */
    private void createNormalizationLabel( JPanel trackPanel, String name ) {
        JPanel placeholder = LegendAndOptionsProvider.createPlaceholder();
        JLabel nameLabel = LegendAndOptionsProvider.createLabel( "Track: " + name, Font.BOLD );

        final JPanel labelPanel = LegendAndOptionsProvider.createStandardPanel();
        labelPanel.add( placeholder, BorderLayout.WEST );
        labelPanel.add( nameLabel, BorderLayout.CENTER );
        labelPanel.setPreferredSize( new Dimension( labelPanel.getPreferredSize().width, labelPanel.getPreferredSize().height + 2 ) );
        trackPanel.add( labelPanel );
    }


    /**
     * Creates a new normalization settins object.
     * <p>
     * @return a new normalization settins object.
     */
    private NormalizationSettings setNewNormalizationSettings() {
        List<Boolean> bools = new ArrayList<>();
        List<Double> factors = new ArrayList<>();
        List<Boolean> hasNorm = new ArrayList<>();
        for( int i = 0; i < trackViewer.getTrackCon().getTrackIds().size(); ++i ) {
            bools.add( i, false );
            factors.add( i, 1.0 );
            hasNorm.add( i, false );
        }
        return new NormalizationSettings( trackViewer.getTrackCon().getTrackIds(), bools, factors, hasNorm );
    }


}
