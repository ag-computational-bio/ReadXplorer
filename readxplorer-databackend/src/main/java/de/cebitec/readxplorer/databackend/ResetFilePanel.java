/*
 * Copyright (C) 2014 Institute for Bioinformatics and Systems Biology, University Giessen, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.cebitec.readxplorer.databackend;


import de.cebitec.readxplorer.utils.filechooser.ReadXplorerFileChooser;
import org.openide.util.NbBundle;


/**
 * Panel for resetting the file path of a direct access mapping file (track).
 *
 * @author Rolf Hilker <rhilker at cebitec.uni-bielefeld.de>
 */
public class ResetFilePanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;

    private String newFileLocation;
    private final String filePath;
    private final String[] fileExtension;


    /**
     * Panel for resetting the file path of a direct access file.
     * <p>
     * @param filePath the old path of the file, which is not valid anymore
     */
    @NbBundle.Messages( { "# {0} - file path", "ResetFilePanel.resetPane.text=File not found:\n{0}\nPlease correct the file path:" } )
    public ResetFilePanel( String filePath ) {
        this.filePath = filePath;
        String[] split = this.filePath.split( "\\." );
        this.fileExtension = new String[]{ split[split.length - 1] };
        initComponents();
        this.resetPane.setText( Bundle.ResetFilePanel_resetPane_text( this.filePath ) );
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        resetField = new javax.swing.JTextField();
        resetButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resetPane = new javax.swing.JTextPane();

        resetField.setText(org.openide.util.NbBundle.getMessage(ResetFilePanel.class, "ResetFilePanel.resetField.text")); // NOI18N

        resetButton.setText(org.openide.util.NbBundle.getMessage(ResetFilePanel.class, "ResetFilePanel.resetButton.text")); // NOI18N
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(null);

        resetPane.setEditable(false);
        resetPane.setBackground(new java.awt.Color(240, 240, 240));
        resetPane.setBorder(null);
        resetPane.setText(org.openide.util.NbBundle.getMessage(ResetFilePanel.class, "ResetFilePanel.resetPane.text")); // NOI18N
        jScrollPane1.setViewportView(resetPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(resetField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetButton)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        ReadXplorerFileChooser fc = new ReadXplorerFileChooser( fileExtension, "" ) {
            private static final long serialVersionUID = 1L;


            @Override
            public void save( String fileLocation ) {
                throw new UnsupportedOperationException( "Operation not supported!" );
            }


            @Override
            public void open( String fileLocation ) {
                resetField.setText( fileLocation );
                newFileLocation = fileLocation;
            }


        };
        fc.setDirectoryProperty( "ResetTrack.Filepath" );
        fc.openFileChooser( ReadXplorerFileChooser.OPEN_DIALOG );
    }//GEN-LAST:event_resetButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton resetButton;
    private javax.swing.JTextField resetField;
    private javax.swing.JTextPane resetPane;
    // End of variables declaration//GEN-END:variables


    public String getNewFileLocation() {
        return newFileLocation;
    }


}
