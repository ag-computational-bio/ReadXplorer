/*
 * Copyright (C) 2014 Institute for Bioinformatics and Systems Biology, University Giessen, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.cebitec.readxplorer.rnatrimming.correlationanalysis;


import de.cebitec.readxplorer.api.objects.JobPanel;
import de.cebitec.readxplorer.rnatrimming.correlationanalysis.CorrelationAnalysisAction.CorrelationCoefficient;
import de.cebitec.readxplorer.ui.dialogmenus.ChangeListeningWizardPanel;
import java.util.prefs.Preferences;
import org.openide.util.NbBundle;
import org.openide.util.NbPreferences;

import static de.cebitec.readxplorer.rnatrimming.correlationanalysis.CorrelationAnalysisAction.CorrelationCoefficient.PEARSON;
import static de.cebitec.readxplorer.rnatrimming.correlationanalysis.CorrelationAnalysisAction.CorrelationCoefficient.SPEARMAN;
import static de.cebitec.readxplorer.rnatrimming.correlationanalysis.CorrelationAnalysisAction.PROP_CORRELATIONCOEFFICIENT;
import static de.cebitec.readxplorer.rnatrimming.correlationanalysis.CorrelationAnalysisAction.PROP_INTERVALLENGTH;
import static de.cebitec.readxplorer.rnatrimming.correlationanalysis.CorrelationAnalysisAction.PROP_MINCORRELATION;
import static de.cebitec.readxplorer.rnatrimming.correlationanalysis.CorrelationAnalysisAction.PROP_MINPEAKCOVERAGE;


/**
 * GUI Card for selection of the parameters for the correlation analysis
 * <p>
 * @author Evgeny Anisiforov <evgeny at cebitec.uni-bielefeld.de>, rhilker
 */
public class ParameterSelectionCard extends JobPanel {

    private static final long serialVersionUID = 1L;


    /**
     * GUI Card for selection of the parameters for the correlation analysis.
     */
    public ParameterSelectionCard() {
        initComponents();
        loadLastParameterSelection();

        intervalLengthSlider.addPropertyChangeListener( createPropertyChangeListener() );
        minimumCorrelationSlider.addPropertyChangeListener( createPropertyChangeListener() );

    }


    @Override
    public boolean isRequiredInfoSet() {
        boolean isValidated = true;
        if( intervalLengthSlider.getValue() <= 2 || minimumCorrelationSlider.getValue() <= 0 ) {
            isValidated = false;
        }

        firePropertyChange( ChangeListeningWizardPanel.PROP_VALIDATE, null, isValidated );
        return isValidated;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        intervalLengthLabel = new javax.swing.JLabel();
        minimumCorrelationLabel = new javax.swing.JLabel();
        intervalLengthSlider = new javax.swing.JSlider();
        minimumCorrelationSlider = new javax.swing.JSlider();
        minimumPeakCoverageLabel = new javax.swing.JLabel();
        minimumPeakCoverageSlider = new javax.swing.JSlider();
        correlationLabel = new javax.swing.JLabel();
        correlationMethodCombo = new javax.swing.JComboBox();

        org.openide.awt.Mnemonics.setLocalizedText(intervalLengthLabel, org.openide.util.NbBundle.getMessage(ParameterSelectionCard.class, "ParameterSelectionCard.intervalLengthLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(minimumCorrelationLabel, org.openide.util.NbBundle.getMessage(ParameterSelectionCard.class, "ParameterSelectionCard.minimumCorrelationLabel.text")); // NOI18N

        intervalLengthSlider.setMajorTickSpacing(500);
        intervalLengthSlider.setMaximum(1000);
        intervalLengthSlider.setMinorTickSpacing(50);
        intervalLengthSlider.setPaintLabels(true);
        intervalLengthSlider.setPaintTicks(true);
        intervalLengthSlider.setSnapToTicks(true);
        intervalLengthSlider.setToolTipText(org.openide.util.NbBundle.getMessage(ParameterSelectionCard.class, "ParameterSelectionCard.intervalLengthSlider.toolTipText")); // NOI18N
        intervalLengthSlider.setValue(100);

        minimumCorrelationSlider.setMajorTickSpacing(20);
        minimumCorrelationSlider.setMinorTickSpacing(10);
        minimumCorrelationSlider.setPaintLabels(true);
        minimumCorrelationSlider.setPaintTicks(true);
        minimumCorrelationSlider.setSnapToTicks(true);
        minimumCorrelationSlider.setToolTipText(org.openide.util.NbBundle.getMessage(ParameterSelectionCard.class, "ParameterSelectionCard.minimumCorrelationSlider.toolTipText")); // NOI18N
        minimumCorrelationSlider.setValue(20);

        org.openide.awt.Mnemonics.setLocalizedText(minimumPeakCoverageLabel, org.openide.util.NbBundle.getMessage(ParameterSelectionCard.class, "ParameterSelectionCard.minimumPeakCoverageLabel.text")); // NOI18N

        minimumPeakCoverageSlider.setMajorTickSpacing(20);
        minimumPeakCoverageSlider.setMaximum(200);
        minimumPeakCoverageSlider.setMinorTickSpacing(10);
        minimumPeakCoverageSlider.setPaintLabels(true);
        minimumPeakCoverageSlider.setPaintTicks(true);
        minimumPeakCoverageSlider.setSnapToTicks(true);
        minimumPeakCoverageSlider.setToolTipText(org.openide.util.NbBundle.getMessage(ParameterSelectionCard.class, "ParameterSelectionCard.minimumPeakCoverageSlider.toolTipText")); // NOI18N
        minimumPeakCoverageSlider.setValue(20);

        org.openide.awt.Mnemonics.setLocalizedText(correlationLabel, org.openide.util.NbBundle.getMessage(ParameterSelectionCard.class, "ParameterSelectionCard.correlationLabel.text")); // NOI18N

        correlationMethodCombo.setModel(new javax.swing.DefaultComboBoxModel(new CorrelationCoefficient[] { CorrelationCoefficient.PEARSON, CorrelationCoefficient.SPEARMAN }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minimumPeakCoverageSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(minimumCorrelationSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(intervalLengthSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(minimumPeakCoverageLabel)
                            .addComponent(intervalLengthLabel)
                            .addComponent(correlationLabel)
                            .addComponent(correlationMethodCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minimumCorrelationLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(correlationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(correlationMethodCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(minimumCorrelationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minimumCorrelationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(minimumPeakCoverageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minimumPeakCoverageSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(intervalLengthLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(intervalLengthSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    public int getIntervalLength() {
        return this.intervalLengthSlider.getValue();
    }


    public int getMinimumCorrelation() {
        return this.minimumCorrelationSlider.getValue();
    }


    public Integer getMinimumPeakCoverage() {
        return this.minimumPeakCoverageSlider.getValue();
    }


    public Object getCorrelationMethod() {
        return this.correlationMethodCombo.getSelectedItem();
    }


    @Override
    public String getName() {
        return NbBundle.getMessage( ParameterSelectionCard.class, "CTL_ParameterSelectionCard.name" );
    }


    /**
     * Loads the last selected parameters into the component.
     */
    private void loadLastParameterSelection() {
        Preferences pref = NbPreferences.forModule( Object.class );
        String corrMethodString = pref.get( PROP_CORRELATIONCOEFFICIENT, SPEARMAN.toString() );
        String pearson = PEARSON.toString();
        CorrelationCoefficient corrCoefficient = corrMethodString.equals( pearson ) ? PEARSON : SPEARMAN;

        intervalLengthSlider.setValue( pref.getInt( PROP_INTERVALLENGTH, intervalLengthSlider.getValue() ) );
        minimumCorrelationSlider.setValue( pref.getInt( PROP_MINCORRELATION, minimumCorrelationSlider.getValue() ) );
        minimumPeakCoverageSlider.setValue( pref.getInt( PROP_MINPEAKCOVERAGE, minimumPeakCoverageSlider.getValue() ) );
        correlationMethodCombo.setSelectedItem( corrCoefficient );

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel correlationLabel;
    private javax.swing.JComboBox correlationMethodCombo;
    private javax.swing.JLabel intervalLengthLabel;
    private javax.swing.JSlider intervalLengthSlider;
    private javax.swing.JLabel minimumCorrelationLabel;
    private javax.swing.JSlider minimumCorrelationSlider;
    private javax.swing.JLabel minimumPeakCoverageLabel;
    private javax.swing.JSlider minimumPeakCoverageSlider;
    // End of variables declaration//GEN-END:variables

}
