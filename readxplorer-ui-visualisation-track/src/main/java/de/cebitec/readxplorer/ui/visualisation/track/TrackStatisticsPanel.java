/*
 * Copyright (C) 2014 Institute for Bioinformatics and Systems Biology, University Giessen, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.cebitec.readxplorer.ui.visualisation.track;


import de.cebitec.readxplorer.api.enums.MappingClass;
import de.cebitec.readxplorer.api.enums.TotalCoverage;
import de.cebitec.readxplorer.databackend.connector.TrackConnector;
import de.cebitec.readxplorer.utils.StatsContainer;
import java.util.Map;
import javax.swing.SwingUtilities;


/**
 *
 * @author ddoppmeier, rhilker
 */
public class TrackStatisticsPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1239345;
    private TrackConnector trackCon;
    private int trackID = -1;


    /**
     * Creates new form TrackNavigator
     */
    public TrackStatisticsPanel() {
        initComponents();
//        LoggerFactory.getLogger(this.getClass().getName()).log(Level.SEVERE, "Do not use empty Constructor for this object! Standard constructor is only meant for GUI builder means");
    }


    public TrackStatisticsPanel( TrackConnector trackCon ) {
        this.trackCon = trackCon;
        this.initComponents();
        this.hideReadPairLabels();
        //  this.computeStats();
    }


    /**
     * Sets a new track connector and recomputes the stats. Use this method when
     * switching to another track.
     * <p>
     * @param trackCon new track connector
     */
    public void setTrackConnector( TrackConnector trackCon ) {
        this.trackCon = trackCon;
        if( trackCon != null && trackCon.getTrackID() != trackID ) {
            trackID = trackCon.getTrackID();
            nameLabel.setText( trackCon.getAssociatedTrackName() );
            this.computeStats(); //TODO: create map of gui component to statistic to avoid copy-paste code
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressbar = new javax.swing.JProgressBar();
        singletonMappingsLabel = new javax.swing.JLabel();
        uniqueSequencesLabel = new javax.swing.JLabel();
        singletonMappingsAbsLabel = new javax.swing.JLabel();
        perfectMappingsLabel = new javax.swing.JLabel();
        bestMatchMappingsLabel = new javax.swing.JLabel();
        numMappingsLabel = new javax.swing.JLabel();
        uniqueSequencesAbsLabel = new javax.swing.JLabel();
        perfectMappingsAbsLabel = new javax.swing.JLabel();
        bestMatchMappingsAbsLabel = new javax.swing.JLabel();
        numMappingsAbsLabel = new javax.swing.JLabel();
        perfPercentageLabel = new javax.swing.JLabel();
        bmPercentageLabel = new javax.swing.JLabel();
        compPercentageLabel = new javax.swing.JLabel();
        perfectPercentage = new javax.swing.JLabel();
        bmPercentage = new javax.swing.JLabel();
        commonPercentage = new javax.swing.JLabel();
        labelNameLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        numberReadsLabel = new javax.swing.JLabel();
        numberReadsAbsLabel = new javax.swing.JLabel();
        readPairPanel = new javax.swing.JPanel();
        numReadPairsLabel = new javax.swing.JLabel();
        numReadPairsAbsLabel = new javax.swing.JLabel();
        numPerfReadPairsLabel = new javax.swing.JLabel();
        numPerfReadPairsAbsLabel = new javax.swing.JLabel();
        numSmallerPairsLabel = new javax.swing.JLabel();
        nummallerPairsAbsLabel = new javax.swing.JLabel();
        numLargerPairsLabel = new javax.swing.JLabel();
        numLargerPairsAbsLabel = new javax.swing.JLabel();
        singleMappings = new javax.swing.JLabel();
        singleMappingsLabel = new javax.swing.JLabel();
        singlePerfectLabel = new javax.swing.JLabel();
        singlePerfectAbsLabel = new javax.swing.JLabel();
        singleBestMatchLabel = new javax.swing.JLabel();
        singleBestMatchAbsLabel = new javax.swing.JLabel();
        commonMappingsLabel = new javax.swing.JLabel();
        commonMappingsAbsLabel = new javax.swing.JLabel();
        singleBMPercentage = new javax.swing.JLabel();
        singlePerfectPercentage = new javax.swing.JLabel();
        singlePerfPercentageLabel = new javax.swing.JLabel();
        singleBMPercentageLabel = new javax.swing.JLabel();
        totalCovPercentageLabel = new javax.swing.JLabel();
        totalCovPercentage = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Global Track Statistics"));
        setPreferredSize(new java.awt.Dimension(200, 400));

        singletonMappingsLabel.setText("Unique Mappings:");

        uniqueSequencesLabel.setText("Unique Seq:");

        singletonMappingsAbsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        singletonMappingsAbsLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        perfectMappingsLabel.setText("Perfect Mappings:");

        bestMatchMappingsLabel.setText("Best-Match Mappings:");

        numMappingsLabel.setText("Mappings:");

        uniqueSequencesAbsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        uniqueSequencesAbsLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        perfectMappingsAbsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        perfectMappingsAbsLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        bestMatchMappingsAbsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bestMatchMappingsAbsLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        numMappingsAbsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        numMappingsAbsLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        perfPercentageLabel.setText("Perfect Coverage:");

        bmPercentageLabel.setText("Best Match Coverage:");

        compPercentageLabel.setText("Common Match Coverage:");

        perfectPercentage.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        perfectPercentage.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        bmPercentage.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bmPercentage.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        commonPercentage.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        commonPercentage.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        labelNameLabel.setText("Name:");

        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        nameLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        numberReadsLabel.setText("Number Reads:");

        numberReadsAbsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        numberReadsAbsLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        readPairPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Read Pair Statistics"));

        numReadPairsLabel.setText("Read Pairs:");

        numReadPairsAbsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        numReadPairsAbsLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        numPerfReadPairsLabel.setText("Perfect Read Pairs:");

        numPerfReadPairsAbsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        numPerfReadPairsAbsLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        numSmallerPairsLabel.setText("Smaller Read Pairs:");

        nummallerPairsAbsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        nummallerPairsAbsLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        numLargerPairsLabel.setText("Larger Read Pairs:");

        numLargerPairsAbsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        numLargerPairsAbsLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        singleMappings.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        singleMappings.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        singleMappingsLabel.setText("Single Mappings:");

        javax.swing.GroupLayout readPairPanelLayout = new javax.swing.GroupLayout(readPairPanel);
        readPairPanel.setLayout(readPairPanelLayout);
        readPairPanelLayout.setHorizontalGroup(
            readPairPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(readPairPanelLayout.createSequentialGroup()
                .addGroup(readPairPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(readPairPanelLayout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(numReadPairsLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, readPairPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(readPairPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numPerfReadPairsLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(numSmallerPairsLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(numLargerPairsLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(singleMappingsLabel, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(readPairPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nummallerPairsAbsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(numLargerPairsAbsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(singleMappings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(numReadPairsAbsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(numPerfReadPairsAbsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        readPairPanelLayout.setVerticalGroup(
            readPairPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, readPairPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(readPairPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numReadPairsLabel)
                    .addComponent(numReadPairsAbsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(readPairPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numPerfReadPairsLabel)
                    .addComponent(numPerfReadPairsAbsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(readPairPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numSmallerPairsLabel)
                    .addComponent(nummallerPairsAbsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(readPairPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numLargerPairsLabel)
                    .addComponent(numLargerPairsAbsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(readPairPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(singleMappings, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(singleMappingsLabel))
                .addGap(23, 23, 23))
        );

        singlePerfectLabel.setText("Single Perfect Mappings:");

        singlePerfectAbsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        singlePerfectAbsLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        singleBestMatchLabel.setText("Single Best-Match Mappings:");

        singleBestMatchAbsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        singleBestMatchAbsLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        commonMappingsLabel.setText("Common Mappings:");

        commonMappingsAbsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        commonMappingsAbsLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        singleBMPercentage.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        singleBMPercentage.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        singlePerfectPercentage.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        singlePerfectPercentage.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        singlePerfPercentageLabel.setText("Single Perfect Coverage:");

        singleBMPercentageLabel.setText("Single Best Match Coverage:");

        totalCovPercentageLabel.setText("Total Coverage:");

        totalCovPercentage.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        totalCovPercentage.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(progressbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(readPairPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(singlePerfectLabel)
                                .addGap(6, 6, 6))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(labelNameLabel)
                                    .addComponent(numMappingsLabel)
                                    .addComponent(singletonMappingsLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                            .addComponent(singlePerfectAbsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(numMappingsAbsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(singletonMappingsAbsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(commonMappingsLabel)
                            .addComponent(singlePerfPercentageLabel)
                            .addComponent(perfPercentageLabel)
                            .addComponent(bmPercentageLabel)
                            .addComponent(singleBMPercentageLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(singleBMPercentage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bmPercentage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(perfectPercentage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(singlePerfectPercentage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(commonMappingsAbsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(perfectMappingsLabel)
                            .addComponent(bestMatchMappingsLabel)
                            .addComponent(singleBestMatchLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(perfectMappingsAbsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(singleBestMatchAbsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bestMatchMappingsAbsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(uniqueSequencesLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addComponent(numberReadsLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numberReadsAbsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(uniqueSequencesAbsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(totalCovPercentageLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(compPercentageLabel)
                                .addGap(5, 5, 5)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(totalCovPercentage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(commonPercentage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numMappingsLabel)
                    .addComponent(numMappingsAbsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(singletonMappingsAbsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(singletonMappingsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(uniqueSequencesAbsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uniqueSequencesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numberReadsLabel)
                    .addComponent(numberReadsAbsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(singlePerfectLabel)
                    .addComponent(singlePerfectAbsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(perfectMappingsLabel)
                    .addComponent(perfectMappingsAbsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(singleBestMatchLabel)
                    .addComponent(singleBestMatchAbsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bestMatchMappingsLabel)
                    .addComponent(bestMatchMappingsAbsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(commonMappingsAbsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(commonMappingsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(singlePerfPercentageLabel)
                    .addComponent(singlePerfectPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(perfectPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(perfPercentageLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(singleBMPercentageLabel)
                    .addComponent(singleBMPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bmPercentageLabel)
                    .addComponent(bmPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(compPercentageLabel)
                    .addComponent(commonPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totalCovPercentageLabel)
                    .addComponent(totalCovPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(readPairPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bestMatchMappingsAbsLabel;
    private javax.swing.JLabel bestMatchMappingsLabel;
    private javax.swing.JLabel bmPercentage;
    private javax.swing.JLabel bmPercentageLabel;
    private javax.swing.JLabel commonMappingsAbsLabel;
    private javax.swing.JLabel commonMappingsLabel;
    private javax.swing.JLabel commonPercentage;
    private javax.swing.JLabel compPercentageLabel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel labelNameLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel numLargerPairsAbsLabel;
    private javax.swing.JLabel numLargerPairsLabel;
    private javax.swing.JLabel numMappingsAbsLabel;
    private javax.swing.JLabel numMappingsLabel;
    private javax.swing.JLabel numPerfReadPairsAbsLabel;
    private javax.swing.JLabel numPerfReadPairsLabel;
    private javax.swing.JLabel numReadPairsAbsLabel;
    private javax.swing.JLabel numReadPairsLabel;
    private javax.swing.JLabel numSmallerPairsLabel;
    private javax.swing.JLabel numberReadsAbsLabel;
    private javax.swing.JLabel numberReadsLabel;
    private javax.swing.JLabel nummallerPairsAbsLabel;
    private javax.swing.JLabel perfPercentageLabel;
    private javax.swing.JLabel perfectMappingsAbsLabel;
    private javax.swing.JLabel perfectMappingsLabel;
    private javax.swing.JLabel perfectPercentage;
    private javax.swing.JProgressBar progressbar;
    private javax.swing.JPanel readPairPanel;
    private javax.swing.JLabel singleBMPercentage;
    private javax.swing.JLabel singleBMPercentageLabel;
    private javax.swing.JLabel singleBestMatchAbsLabel;
    private javax.swing.JLabel singleBestMatchLabel;
    private javax.swing.JLabel singleMappings;
    private javax.swing.JLabel singleMappingsLabel;
    private javax.swing.JLabel singlePerfPercentageLabel;
    private javax.swing.JLabel singlePerfectAbsLabel;
    private javax.swing.JLabel singlePerfectLabel;
    private javax.swing.JLabel singlePerfectPercentage;
    private javax.swing.JLabel singletonMappingsAbsLabel;
    private javax.swing.JLabel singletonMappingsLabel;
    private javax.swing.JLabel totalCovPercentage;
    private javax.swing.JLabel totalCovPercentageLabel;
    private javax.swing.JLabel uniqueSequencesAbsLabel;
    private javax.swing.JLabel uniqueSequencesLabel;
    // End of variables declaration//GEN-END:variables


    private void computeStats() {
        Thread t = new Thread( new Runnable() {

            @Override
            public void run() {
                boolean recalculated = false;
                boolean recalcReadPair = false;
                boolean isReadPairTrack = trackCon.isReadPairTrack();

                readPairPanel.setVisible( isReadPairTrack );
                numReadPairsLabel.setVisible( isReadPairTrack );
                numReadPairsAbsLabel.setVisible( isReadPairTrack );
                numPerfReadPairsLabel.setVisible( isReadPairTrack );
                numPerfReadPairsAbsLabel.setVisible( isReadPairTrack );
                numSmallerPairsLabel.setVisible( isReadPairTrack );
                nummallerPairsAbsLabel.setVisible( isReadPairTrack );
                numLargerPairsLabel.setVisible( isReadPairTrack );
                numLargerPairsAbsLabel.setVisible( isReadPairTrack );
                singleMappingsLabel.setVisible( isReadPairTrack );
                singleMappings.setVisible( isReadPairTrack );

                int genomeLength = trackCon.getRefGenome().getGenomeLength();
                StatsContainer statsContainer = trackCon.getTrackStats();
                Map<String, Integer> statsMap = statsContainer.getStatsMap();

                //read pair stuff
                int numReadPairs = statsMap.get( StatsContainer.NO_READ_PAIRS );
                if( numReadPairs == -1 ) {
//                        TrackStatisticsPanel.this.remove(numReadPairsLabel);
//                        TrackStatisticsPanel.this.remove(numReadPairsAbsLabel);
                    numReadPairsLabel.setVisible( false );
                    numReadPairsAbsLabel.setVisible( false );
                } else {
                    if( numReadPairs == -2 ) {
                        numReadPairs = trackCon.getNumOfReadPairsCalculate();
                        recalcReadPair = true;
                    }
                    numReadPairsAbsLabel.setText( String.valueOf( numReadPairs ) );
                }

                int numPerfectReadPairs = statsMap.get( StatsContainer.NO_PERF_PAIRS );
                if( numPerfectReadPairs == -1 ) {
//                        TrackStatisticsPanel.this.remove(numPerfectSeqPairsLabel);
//                        TrackStatisticsPanel.this.remove(numPerfectSeqPairsAbsLabel);
                    numPerfReadPairsLabel.setVisible( false );
                    numPerfReadPairsAbsLabel.setVisible( false );
                } else {
                    if( numPerfectReadPairs == -2 ) {
                        numPerfectReadPairs = trackCon.getNumOfPerfectReadPairsCalculate();
                        recalcReadPair = true;
                    }
                    numPerfReadPairsAbsLabel.setText( String.valueOf( numPerfectReadPairs ) );
                }

                int numSmallerReadPairs = statsMap.get( StatsContainer.NO_SMALL_DIST_PAIRS );
                numSmallerReadPairs += statsMap.get( StatsContainer.NO_SMALL_ORIENT_WRONG_PAIRS );
                if( numSmallerReadPairs == -1 ) {
//                        TrackStatisticsPanel.this.remove(numPerfectSeqPairsLabel);
//                        TrackStatisticsPanel.this.remove(numPerfectSeqPairsAbsLabel);
                    numSmallerPairsLabel.setVisible( false );
                    nummallerPairsAbsLabel.setVisible( false );
                } else {
//                    if (numSmallerSeqPairs == -2) {
//                        numSmallerSeqPairs = trackCon.getNumOfSmallerSeqPairsCalculate();
//                        recalcSeqPair = true;
//                    }
                    nummallerPairsAbsLabel.setText( String.valueOf( numSmallerReadPairs ) );
                }

                int numLargerSeqPairs = statsMap.get( StatsContainer.NO_LARGE_DIST_PAIRS );
                numLargerSeqPairs += statsMap.get( StatsContainer.NO_LARGE_ORIENT_WRONG_PAIRS );
                if( numLargerSeqPairs == -1 ) {
//                        TrackStatisticsPanel.this.remove(numPerfectSeqPairsLabel);
//                        TrackStatisticsPanel.this.remove(numPerfectSeqPairsAbsLabel);
                    numLargerPairsLabel.setVisible( false );
                    numLargerPairsAbsLabel.setVisible( false );
                } else {
//                    if (numLargerSeqPairs == -2) {
//                        numLargerSeqPairs = trackCon.getNumOfLargerSeqPairsCalculate();
//                        recalcSeqPair = true;
//                    }
                    numLargerPairsAbsLabel.setText( String.valueOf( numLargerSeqPairs ) );
                }

                //single mapping stuff
                int numSingleMappings = statsMap.get( StatsContainer.NO_SINGLE_MAPPIGNS );
                if( numSingleMappings == -1 ) {
//                        TrackStatisticsPanel.this.remove(numPerfUniqSeqPairsLabel);
//                        TrackStatisticsPanel.this.remove(numPerfUniqSeqPairsAbsLabel);
                    singleMappingsLabel.setVisible( false );
                    singleMappings.setVisible( false );
                } else {
                    if( numSingleMappings == -2 ) {
                        numSingleMappings = trackCon.getNumOfSingleMappingsCalculate();
                        recalcReadPair = true;
                    }
                    singleMappings.setText( String.valueOf( numSingleMappings ) );
                }

                int numOfMappings = statsMap.get( StatsContainer.NO_MAPPINGS );
                if( numOfMappings == -1 ) {
                    recalculated = true;
                }
                numMappingsAbsLabel.setText( String.valueOf( numOfMappings ) );

                int numUniqueMappings = statsMap.get( StatsContainer.NO_UNIQ_MAPPINGS );
                if( numUniqueMappings == -1 ) {
                    recalculated = true;
                }
                singletonMappingsAbsLabel.setText( String.valueOf( numUniqueMappings ) );

                int numUniqueSequences = statsMap.get( StatsContainer.NO_UNIQUE_SEQS );
                if( numUniqueSequences == -1 ) {
                    recalculated = true;
                }
                uniqueSequencesAbsLabel.setVisible( false );
                uniqueSequencesLabel.setVisible( false );
                uniqueSequencesAbsLabel.setText( String.valueOf( numUniqueSequences ) );

                numberReadsAbsLabel.setVisible( false );
                numberReadsLabel.setVisible( false );
                int numReads = statsMap.get( StatsContainer.NO_READS );
                if( numReads == -1 ) {
                    numberReadsAbsLabel.setText( "Not available" );
                } else {
                    numberReadsAbsLabel.setText( String.valueOf( numReads ) );
                }

                int numOfPerfectMappings = statsMap.get( MappingClass.PERFECT_MATCH.toString() );
                if( numOfPerfectMappings == -1 ) {
                    recalculated = true;
                }
                perfectMappingsAbsLabel.setText( String.valueOf( numOfPerfectMappings ) );

                int numOfBestMatchMappings = statsMap.get( MappingClass.BEST_MATCH.toString() );
                if( numOfBestMatchMappings == -1 ) {
                    recalculated = true;
                }
                bestMatchMappingsAbsLabel.setText( String.valueOf( numOfBestMatchMappings ) );

                int numOfCommonMatchMappings = statsMap.get( MappingClass.COMMON_MATCH.toString() );
                if( numOfCommonMatchMappings == -1 ) {
                    recalculated = true;
                }
                commonMappingsAbsLabel.setText( String.valueOf( numOfCommonMatchMappings ) );

                int numOfSPerfectMappings = statsMap.get( MappingClass.SINGLE_PERFECT_MATCH.toString() );
                if( numOfSPerfectMappings == -1 ) {
                    recalculated = true;
                }
                singlePerfectAbsLabel.setText( String.valueOf( numOfSPerfectMappings ) );

                int numOfSBestMatchMappings = statsMap.get( MappingClass.SINGLE_BEST_MATCH.toString() );
                if( numOfSBestMatchMappings == -1 ) {
                    recalculated = true;
                }
                singleBestMatchAbsLabel.setText( String.valueOf( numOfSBestMatchMappings ) );

                double percentagePerfectCovered = (double) statsMap.get( MappingClass.PERFECT_MATCH + StatsContainer.COVERAGE_STRING ) / genomeLength * 100;
                if( percentagePerfectCovered == -1 ) {
                    recalculated = true;
                }

                double percentageBMCovered = (double) statsMap.get( MappingClass.BEST_MATCH + StatsContainer.COVERAGE_STRING ) / genomeLength * 100;
                if( percentageBMCovered == -1 ) {
                    recalculated = true;
                }

                double percentageCommonCovered = (double) statsMap.get( MappingClass.COMMON_MATCH + StatsContainer.COVERAGE_STRING ) / genomeLength * 100;
                if( percentageCommonCovered == -1 ) {
                    recalculated = true;
                }

                double percentageSPerfectCovered = (double) statsMap.get( MappingClass.SINGLE_PERFECT_MATCH + StatsContainer.COVERAGE_STRING ) / genomeLength * 100;
                if( percentageSPerfectCovered == -1 ) {
                    recalculated = true;
                }

                double percentageSBMCovered = (double) statsMap.get( MappingClass.SINGLE_BEST_MATCH + StatsContainer.COVERAGE_STRING ) / genomeLength * 100;
                if( percentageSBMCovered == -1 ) {
                    recalculated = true;
                }

                double percentageTotalCovered = (double) statsMap.get( TotalCoverage.TOTAL_COVERAGE + StatsContainer.COVERAGE_STRING ) / genomeLength * 100;
                if( percentageTotalCovered == -1 ) {
                    recalculated = true;
                }

//                if (recalculated) {
//                    trackCon.setStatistics(numOfMappings, numUniqueMappings, numUniqueSequences,
//                            numOfPerfectMappings, numOfBestMatchMappings, percentagePerfectCovered,
//                            percentageBMCovered, percentageNErrorCovered, numReads);
//                }
//                if (recalcSeqPair) {
//                    trackCon.addSeqPairStatistics(numSeqPairs, numPerfectSeqPairs, numSmallerSeqPairs,
//                            numLargerSeqPairs, numSingleMappings);
//                }

                String singlePerfectCov = String.format( "%.2f%%", percentageSPerfectCovered );
                String perfectCov = String.format( "%.2f%%", percentagePerfectCovered );
                String singleBMCov = String.format( "%.2f%%", percentageSBMCovered );
                String bmCov = String.format( "%.2f%%", percentageBMCovered );
                String commonCov = String.format( "%.2f%%", percentageCommonCovered );
                String totalCov = String.format( "%.2f%%", percentageTotalCovered );

                singlePerfectPercentage.setText( singlePerfectCov );
                perfectPercentage.setText( perfectCov );
                singleBMPercentage.setText( singleBMCov );
                bmPercentage.setText( bmCov );
                commonPercentage.setText( commonCov );
                totalCovPercentage.setText( totalCov );
                statsFinished();
            }


        } ) {
        };
        progressbar.setIndeterminate( true );

        t.setPriority( Thread.MIN_PRIORITY );
        t.start();
    }


    private void statsFinished() {
        SwingUtilities.invokeLater( new Runnable() {

            @Override
            public void run() {
                progressbar.setIndeterminate( false );
                progressbar.setVisible( false );
            }


        } );
    }


    public void close() {
        trackCon = null;
    }


    /**
     * Used for hiding all read pair associated labels until they are really
     * needed.
     */
    private void hideReadPairLabels() {
        this.numberReadsLabel.setVisible( false );
        this.numberReadsAbsLabel.setVisible( false );

        this.numReadPairsLabel.setVisible( false );
        this.numReadPairsAbsLabel.setVisible( false );
        this.numPerfReadPairsLabel.setVisible( false );
        this.numPerfReadPairsAbsLabel.setVisible( false );
        this.numSmallerPairsLabel.setVisible( false );
        this.nummallerPairsAbsLabel.setVisible( false );
        this.numLargerPairsLabel.setVisible( false );
        this.numLargerPairsAbsLabel.setVisible( false );
    }


}
