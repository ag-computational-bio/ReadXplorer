/*
 * Copyright (C) 2014 Institute for Bioinformatics and Systems Biology, University Giessen, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.cebitec.readxplorer.thumbnail;


import de.cebitec.readxplorer.ui.TopComponentExtended;
import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.api.visual.widget.BirdViewController;
import org.netbeans.api.visual.widget.Scene;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * TopComponent to display a Scene for the Track-Widgets.
 */
@ConvertAsProperties( dtd = "-//de.cebitec.readxplorer.thumbnail//ThumbnailView//EN",
                      autostore = false )
@TopComponent.Description(
         preferredID = "ThumbnailViewTopComponent",
         persistenceType = TopComponent.PERSISTENCE_ALWAYS )
@TopComponent.Registration( mode = "ThumbMode", openAtStartup = false )
@ActionID( category = "Window", id = "de.cebitec.readxplorer.thumbnail.ThumbnailViewTopComponent" )
@ActionReference( path = "Menu/Window" /* , position = 333 */ )
@TopComponent.OpenActionRegistration(
         displayName = "#CTL_ThumbnailView",
         preferredID = "#CTL_ThumbnailView" )
@NbBundle.Messages( {
    "CTL_ThumbnailView=ThumbnailViewTopComponent",
    "CTL_ThumbnailViewTopComponent=Thumbnail View Window",
    "HINT_ThumbnailViewTopComponent=This is a Thumbnail View window"
} )
public final class ThumbnailViewTopComponent extends TopComponentExtended
        implements MouseListener {

    private static final Logger LOG = LoggerFactory.getLogger( ThumbnailViewTopComponent.class.getName() );

    private static final long serialVersionUID = 1L;

    private final JComponent myView;
    private final Scene scene;
    private final BirdViewController birdCont;
    private final ThumbnailController thumbCon;


    public Scene getScene() {
        return scene;
    }


    private static ThumbnailViewTopComponent instance;


    /**
     * path to the icon used by the component and its open action
     */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    public ThumbnailViewTopComponent() {
        initComponents();
        setName( NbBundle.getMessage( ThumbnailViewTopComponent.class, "CTL_ThumbnailViewTopComponent" ) );
        setToolTipText( NbBundle.getMessage( ThumbnailViewTopComponent.class, "HINT_ThumbnailViewTopComponent" ) );
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        scene = new Scene();
        myView = scene.createView();
        //BirdViewController hinzuf√ºgen
        birdCont = scene.createBirdView();

        birdCont.setWindowSize( new Dimension( 400, 400 ) );
        birdCont.setZoomFactor( 2.0 );

        jScrollPane1.setViewportView( myView );

        myView.addMouseListener( this );
        associateLookup( Lookup.getDefault().lookup( ThumbnailController.class ).getLookup() );
        thumbCon = Lookup.getDefault().lookup( ThumbnailController.class );

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());
        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables


    // End of variables declaration
    // End of variables declaration
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files
     * only, i.e. deserialization routines; otherwise you could get a
     * non-deserialized instance. To obtain the singleton instance, use
     * {@link #findInstance}.
     */
    public static synchronized ThumbnailViewTopComponent getDefault() {
        if( instance == null ) {
            instance = new ThumbnailViewTopComponent();
        }
        return instance;
    }


    /**
     * Obtain the ThumbnailViewTopComponent instance. Never call
     * {@link #getDefault} directly!
     */
    public static synchronized ThumbnailViewTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent( Bundle.CTL_ThumbnailView() );
        if( win == null ) {
            LOG.warn( "Cannot find " + Bundle.CTL_ThumbnailView() + " component. It will not be located properly in the window system." );
            return getDefault();
        }
        if( win instanceof ThumbnailViewTopComponent ) {
            return (ThumbnailViewTopComponent) win;
        }
        LOG.warn( "There seem to be multiple components with the '" + Bundle.CTL_ThumbnailView() +
                  "' ID. That is a potential source of errors and unexpected behavior." );
        return getDefault();
    }


    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }


    @Override
    public void componentClosed() {
        scene.removeChildren();
        if( thumbCon != null ) {
            thumbCon.removeThumbSpecificCookies();
            thumbCon.addOpenCookie();
        }

    }


    @Override
    protected void componentOpened() {
        if( thumbCon != null ) {
            thumbCon.removeOpenCookie();
        }
    }


    @Override
    protected void componentActivated() {
        if( thumbCon != null ) {
            thumbCon.setMeAsActive( this );
            thumbCon.removeOpenCookie();
        }
    }


    @Override
    protected void componentHidden() {
        if( thumbCon != null ) {
            thumbCon.addOpenCookie();
        }
    }


    void writeProperties( java.util.Properties p ) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty( "version", "1.0" );
        // store your settings
    }


    Object readProperties( java.util.Properties p ) {
        if( instance == null ) {
            instance = this;
        }
        instance.readPropertiesImpl( p );
        return instance;
    }


    private void readPropertiesImpl( java.util.Properties p ) {
        String version = p.getProperty( "version" );
        // read your settings according to their version here
    }


    @Override
    protected String preferredID() {
        return Bundle.CTL_ThumbnailView();
    }


    @Override
    public void mouseClicked( MouseEvent e ) {
    }


    @Override
    public void mousePressed( MouseEvent e ) {
        if( e.getButton() == MouseEvent.BUTTON3 ) {
            birdCont.show();
        }

    }


    @Override
    public void mouseReleased( MouseEvent e ) {
        if( e.getButton() == MouseEvent.BUTTON3 ) {
            birdCont.hide();
        }

    }


    @Override
    public void mouseEntered( MouseEvent e ) {
    }


    @Override
    public void mouseExited( MouseEvent e ) {
    }


}
