/*
 * Copyright (C) 2015 Institute for Bioinformatics and Systems Biology, University Giessen, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.cebitec.readxplorer.transcriptionanalyses;

import de.cebitec.readxplorer.api.objects.JobPanel;
import de.cebitec.readxplorer.ui.dialogmenus.ChangeListeningWizardPanel;
import de.cebitec.readxplorer.utils.GeneralUtils;
import java.util.prefs.Preferences;
import org.openide.util.NbPreferences;


/**
 * Visual panel allowing the configuration of the length of exported promoter
 * sequences.
 * <p>
 * @author Rolf Hilker <rolf.hilker at mikrobio.med.uni-giessen.de>
 */
public final class PromoterSeqLengthVisualPanel extends JobPanel {

    private static final long serialVersionUID = 1L;
    private int promoterLength;
    private int promoterDownstreamLength;


    /** Visual panel allowing the configuration of the length of exported
     * promoter sequences. */
    public PromoterSeqLengthVisualPanel() {
        initComponents();
        initAdditionalComponents();
    }


    /**
     * Initializes all additional stuff and components of this panel needed at
     * startup.
     */
    private void initAdditionalComponents() {
        loadLastParameterSelection();
        promoterLengthField.setText( String.valueOf( promoterLength ) );
        promoterLengthField.getDocument().addDocumentListener( createDocumentListener() );
        promoterDownLengthField.setText( String.valueOf( promoterDownstreamLength ) );
        promoterDownLengthField.getDocument().addDocumentListener( createDocumentListener() );
    }


    @Override
    public String getName() {
        return "Promoter Sequence Length Configuration";
    }


    /** This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        promoterLengthLabel = new javax.swing.JLabel();
        promoterLengthField = new javax.swing.JTextField();
        promoterLabel = new javax.swing.JLabel();
        promoterDownLengthField = new javax.swing.JTextField();
        promoterDownLabel = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(promoterLengthLabel, org.openide.util.NbBundle.getMessage(PromoterSeqLengthVisualPanel.class, "PromoterSeqLengthVisualPanel.promoterLengthLabel.text")); // NOI18N

        promoterLengthField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        promoterLengthField.setText(org.openide.util.NbBundle.getMessage(PromoterSeqLengthVisualPanel.class, "PromoterSeqLengthVisualPanel.promoterLengthField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(promoterLabel, org.openide.util.NbBundle.getMessage(PromoterSeqLengthVisualPanel.class, "PromoterSeqLengthVisualPanel.promoterLabel.text")); // NOI18N

        promoterDownLengthField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        promoterDownLengthField.setText(org.openide.util.NbBundle.getMessage(PromoterSeqLengthVisualPanel.class, "PromoterSeqLengthVisualPanel.promoterDownLengthField.text")); // NOI18N
        promoterDownLengthField.setToolTipText(org.openide.util.NbBundle.getMessage(PromoterSeqLengthVisualPanel.class, "PromoterSeqLengthVisualPanel.promoterDownLengthField.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(promoterDownLabel, org.openide.util.NbBundle.getMessage(PromoterSeqLengthVisualPanel.class, "PromoterSeqLengthVisualPanel.promoterDownLabel.text")); // NOI18N
        promoterDownLabel.setToolTipText(org.openide.util.NbBundle.getMessage(PromoterSeqLengthVisualPanel.class, "PromoterSeqLengthVisualPanel.promoterDownLabel.toolTipText")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(promoterLengthLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(promoterLengthField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(promoterLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(promoterDownLengthField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(promoterDownLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(promoterLengthLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(promoterLengthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(promoterLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(promoterDownLengthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(promoterDownLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel promoterDownLabel;
    private javax.swing.JTextField promoterDownLengthField;
    private javax.swing.JLabel promoterLabel;
    private javax.swing.JTextField promoterLengthField;
    private javax.swing.JLabel promoterLengthLabel;
    // End of variables declaration//GEN-END:variables


    /**
     * @return The promoter sequence length set by the user.
     */
    public int getPromoterLength() {
        return promoterLength;
    }


    /**
     * @return The downstream promoter sequence length set by the user.
     */
    public int getPromoterDownstreamLength() {
        return promoterDownstreamLength;
    }


    @Override
    public boolean isRequiredInfoSet() {
        boolean isValidated = true;
        if( GeneralUtils.isValidPositiveIntegerInput( promoterLengthField.getText() ) ) {
            promoterLength = Integer.parseInt( promoterLengthField.getText() );
        } else {
            isValidated = false;
        }
        if( GeneralUtils.isValidIntegerInput( promoterDownLengthField.getText() ) ) {
            promoterDownstreamLength = Integer.parseInt( promoterDownLengthField.getText() );
        } else {
            isValidated = false;
        }
        firePropertyChange( ChangeListeningWizardPanel.PROP_VALIDATE, null, isValidated );
        return isValidated;
    }


    /**
     * Updates the parameters for this panel with the globally stored settings
     * for this wizard panel. If no settings were stored, the default
     * configuration is chosen.
     */
    private void loadLastParameterSelection() {
        Preferences pref = NbPreferences.forModule( Object.class );
        promoterLength = pref.getInt( PromoterSeqLengthWizardPanel.PROMOTER_LENGTH, 70 );
        promoterDownstreamLength = pref.getInt( PromoterSeqLengthWizardPanel.PROMOTER_DOWN_LENGTH, 0 );
    }


}
