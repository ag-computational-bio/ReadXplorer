/*
 * Copyright (C) 2014 Institute for Bioinformatics and Systems Biology, University Giessen, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.cebitec.readxplorer.transcriptionanalyses;


import de.cebitec.readxplorer.databackend.ResultTrackAnalysis;
import de.cebitec.readxplorer.databackend.dataobjects.PersistentFeature;
import de.cebitec.readxplorer.exporter.tables.TableExportFileChooser;
import de.cebitec.readxplorer.transcriptionanalyses.datastructures.NormalizedReadCount;
import de.cebitec.readxplorer.ui.analysis.ResultTablePanel;
import de.cebitec.readxplorer.ui.datavisualisation.BoundsInfoManager;
import de.cebitec.readxplorer.ui.tablevisualization.TableUtils;
import de.cebitec.readxplorer.ui.tablevisualization.tablefilter.TableRightClickFilter;
import de.cebitec.readxplorer.ui.visualisation.reference.ReferenceFeatureTopComp;
import de.cebitec.readxplorer.utils.GeneralUtils;
import de.cebitec.readxplorer.utils.UneditableTableModel;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.openide.windows.WindowManager;


/**
 * Panel showing a result of an analysis filtering for features with a min and
 * max certain readcount.
 * <p>
 * @author -Rolf Hilker-
 */
public class ResultPanelNormalization extends ResultTablePanel {

    private static final long serialVersionUID = 1L;

    public static final String RETURNED_FEATURES = "Total number of returned features";
    public static final String FEATURES_TOTAL = "Total number of reference features";
    public static final String TOTAL_MAPPINGS = "Number of assignable mappings";

    private NormalizationAnalysisResult normalizationResult;
    private final Map<String, Integer> normStatsMap;
    private final TableRightClickFilter<UneditableTableModel> tableFilter;
    private ReferenceFeatureTopComp refComp;


    /**
     * Panel showing a result of an analysis filtering for features with a min
     * and max certain readcount.
     * <p>
     * @param bim BoundsInfoManager of the reference on which this analysis was
     *            performed.
     */
    public ResultPanelNormalization( BoundsInfoManager bim ) {
        setBoundsInfoManager( bim );
        initComponents();
        final int posIdx = 0;
        final int trackIdx = 2;
        final int chromIdx = 3;
        tableFilter = new TableRightClickFilter<>( UneditableTableModel.class, posIdx, trackIdx );
        this.normalizationTable.getTableHeader().addMouseListener( tableFilter );
        this.normStatsMap = new HashMap<>();
        this.normStatsMap.put( RETURNED_FEATURES, 0 );
        this.normStatsMap.put( TOTAL_MAPPINGS, 0 );
        this.refComp = ReferenceFeatureTopComp.findInstance();

        TableUtils.addTableListSelectionListener( normalizationTable, posIdx, chromIdx, getBoundsInfoManager() );
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        parametersLabel = new javax.swing.JLabel();
        histogramButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        normalizationTable = new javax.swing.JTable();
        exportButton = new javax.swing.JButton();
        statisticsButton = new javax.swing.JButton();

        parametersLabel.setText(org.openide.util.NbBundle.getMessage(ResultPanelNormalization.class, "ResultPanelNormalization.parametersLabel.text_1")); // NOI18N

        histogramButton.setText(org.openide.util.NbBundle.getMessage(ResultPanelNormalization.class, "ResultPanelNormalization.histogramButton.text_1")); // NOI18N
        histogramButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                histogramButtonActionPerformed(evt);
            }
        });

        normalizationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Feature", "Feature Type", "Track", "Chromosome", "Strand", "Start", "Stop", "Length", "Effective Length", "TPM", "RPKM", "Read Count"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(normalizationTable);
        if (normalizationTable.getColumnModel().getColumnCount() > 0) {
            normalizationTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelNormalization.class, "ResultPanelNormalization.normalizationTable.columnModel.title0_1")); // NOI18N
            normalizationTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelNormalization.class, "ResultPanelRPKM.rpkmTable.columnModel.title5_1")); // NOI18N
            normalizationTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelNormalization.class, "ResultPanelRPKM.rpkmTable.columnModel.title8_1")); // NOI18N
            normalizationTable.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelNormalization.class, "ResultPanelRPKM.rpkmTable.columnModel.title9")); // NOI18N
            normalizationTable.getColumnModel().getColumn(4).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelNormalization.class, "ResultPanelNormalization.normalizationTable.columnModel.title4_1")); // NOI18N
            normalizationTable.getColumnModel().getColumn(5).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelNormalization.class, "ResultPanelRPKM.rpkmTable.columnModel.title1_1")); // NOI18N
            normalizationTable.getColumnModel().getColumn(6).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelNormalization.class, "ResultPanelRPKM.rpkmTable.columnModel.title2_1")); // NOI18N
            normalizationTable.getColumnModel().getColumn(7).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelNormalization.class, "ResultPanelNormalization.normalizationTable.columnModel.title7_1")); // NOI18N
            normalizationTable.getColumnModel().getColumn(8).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelNormalization.class, "ResultPanelNormalization.normalizationTable.columnModel.title11")); // NOI18N
            normalizationTable.getColumnModel().getColumn(9).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelNormalization.class, "ResultPanelNormalization.normalizationTable.columnModel.title10")); // NOI18N
            normalizationTable.getColumnModel().getColumn(10).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelNormalization.class, "ResultPanelRPKM.rpkmTable.columnModel.title3_1")); // NOI18N
            normalizationTable.getColumnModel().getColumn(11).setHeaderValue(org.openide.util.NbBundle.getMessage(ResultPanelNormalization.class, "ResultPanelRPKM.rpkmTable.columnModel.title6_1")); // NOI18N
        }

        exportButton.setText(org.openide.util.NbBundle.getMessage(ResultPanelNormalization.class, "ResultPanelNormalization.exportButton.text_1")); // NOI18N
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        statisticsButton.setText(org.openide.util.NbBundle.getMessage(ResultPanelNormalization.class, "ResultPanelNormalization.statisticsButton.text")); // NOI18N
        statisticsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statisticsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(parametersLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 568, Short.MAX_VALUE)
                .addComponent(statisticsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(histogramButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportButton))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(histogramButton)
                    .addComponent(parametersLabel)
                    .addComponent(exportButton)
                    .addComponent(statisticsButton)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void histogramButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_histogramButtonActionPerformed
        NormHistogramTopComponent normHistogramTopComp = (NormHistogramTopComponent) WindowManager.getDefault().findTopComponent( "NormHistogramTopComponent" );
        String panelName = "Histogram for " + GeneralUtils.generateConcatenatedString( normalizationResult.getTrackNameList(), 20 );
        NormalizedReadCountHist normalizedReadCountHist = new NormalizedReadCountHist( normalizationResult );
        normalizedReadCountHist.showHistogram();
        normHistogramTopComp.openAnalysisTab( panelName, normalizedReadCountHist );
    }//GEN-LAST:event_histogramButtonActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        TableExportFileChooser fileChooser = new TableExportFileChooser( TableExportFileChooser.getTableFileExtensions(), normalizationResult );
    }//GEN-LAST:event_exportButtonActionPerformed

    private void statisticsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statisticsButtonActionPerformed
        JOptionPane.showMessageDialog( this, new NormalizationStatsPanel( normStatsMap ), "TPM, RPKM and Read Count Statistics", JOptionPane.INFORMATION_MESSAGE );
    }//GEN-LAST:event_statisticsButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportButton;
    private javax.swing.JButton histogramButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable normalizationTable;
    private javax.swing.JLabel parametersLabel;
    private javax.swing.JButton statisticsButton;
    // End of variables declaration//GEN-END:variables


    /**
     * Adds a list of features with read count and normalized read count values
     * (TPM and RPKM) to this panel.
     * <p>
     * @param newResult the new result to add
     */
    @Override
    public void addResult( ResultTrackAnalysis newResult ) {

        tableFilter.setTrackMap( newResult.getTrackMap() );

        if( newResult instanceof NormalizationAnalysisResult ) {
            NormalizationAnalysisResult normalizationResultNew = (NormalizationAnalysisResult) newResult;
            final int nbColumns = 12;

            if( normalizationResult == null ) {
                normalizationResult = normalizationResultNew;
                normStatsMap.put( FEATURES_TOTAL, normalizationResultNew.getNoGenomeFeatures() );
            } else {
                this.normalizationResult.addAllToResult( normalizationResultNew.getResults() );
            }
            DefaultTableModel model = (DefaultTableModel) normalizationTable.getModel();

            PersistentFeature feat;
            for( NormalizedReadCount normValue : normalizationResult.getResults() ) {
                feat = normValue.getFeature();
                Object[] rowData = new Object[nbColumns];
                int i = 0;
                rowData[i++] = feat;
                rowData[i++] = feat.getType();
                rowData[i++] = normalizationResult.getTrackEntry( normValue.getTrackId(), false );
                rowData[i++] = normalizationResultNew.getChromosomeMap().get( feat.getChromId() );
                rowData[i++] = feat.getStrandString();
                rowData[i++] = feat.getStartOnStrand();
                rowData[i++] = feat.getStopOnStrand();
                rowData[i++] = feat.getLength();
                rowData[i++] = normValue.getEffectiveFeatureLength();
                rowData[i++] = normValue.getTPM();
                rowData[i++] = normValue.getRPKM();
                rowData[i++] = normValue.getReadCount();

                model.addRow( rowData );
            }

            TableRowSorter<TableModel> sorter = new TableRowSorter<>();
            normalizationTable.setRowSorter( sorter );
            sorter.setModel( model );

            ParameterSetNormalization normParams = (ParameterSetNormalization) normalizationResult.getParameters();
            parametersLabel.setText( org.openide.util.NbBundle.getMessage( ResultPanelNormalization.class,
                                                                           "ResultPanelNormalization.parametersLabel.text_1",
                                                                           normParams.getMinReadCount(),
                                                                           normParams.getMaxReadCount() ) );

            normStatsMap.put( RETURNED_FEATURES, normStatsMap.get( RETURNED_FEATURES ) + normalizationResultNew.getResults().size() );
            normStatsMap.put( TOTAL_MAPPINGS, normStatsMap.get( TOTAL_MAPPINGS ) + (int) Math.ceil( normalizationResultNew.getTotalMappings() ) );
            normalizationResult.setStatsMap( normStatsMap );
        }
    }


    /**
     * @return the number of features filtered during the associated analysis
     */
    @Override
    public int getDataSize() {
        return normalizationResult.getResults().size();
    }


}
