/*
 * Copyright (C) 2016 Patrick Blumenkamp<patrick.blumenkamp@computational.bio.uni-giessen.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.cebitec.readxplorer.transcriptionanalyses.gnur;

import org.openide.util.Lookup;
import org.rosuda.REngine.REXPMismatchException;
import org.rosuda.REngine.Rserve.RserveException;


/**
 *
 * @author Patrick
 * Blumenkamp<patrick.blumenkamp@computational.bio.uni-giessen.de>
 */
public class RPackageOverview extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;


    /** Creates new form RPackageOverview */
    public RPackageOverview( GnuR gnuR ) throws REXPMismatchException, RserveException {
        initComponents();
        textPane.setContentType( "text/html" );
        textPane.setText( checkDependencies( gnuR ) );

    }


    private String checkDependencies( GnuR gnur ) throws REXPMismatchException, RserveException {
        StringBuilder sb = new StringBuilder( 200 );
        sb.append( "<html><head><style>table, th, td {border: 1px solid black}</style></head><body>" );
        for( RProcessI process : Lookup.getDefault().<RProcessI>lookupAll( RProcessI.class ) ) {
            sb.append( "<h3>" ).append( process.getTool().toString() ).append( "</h3>" );
            sb.append( "<table style=\"width:100%\"><tr>" );
            sb.append( "<th>Name</th><th>Required</th><th>Installed</th></tr>" );
            for( RPackageDependency p : process.getDependencies() ) {
                Version v = gnur.getPackageVersion( p.getName() ).orElse( new Version( "0" ) );
                String installedVersion = (v.getVersion().equals( "0" )) ? "None" : v.getVersion();
                String requiredVersion = (p.getVersion().getVersion().equals( "0" )) ? "Any" : p.getVersion().getVersion();
                if( p.getVersion().compareTo( v ) <= 0 && !installedVersion.equals( "None" ) ) {
                    sb.append( String.format( "<tr><td>%s</td><td>%s</td><td>%s</td></tr>", p.getName(), requiredVersion, installedVersion ) );
                } else {
                    sb.append( String.format( "<tr style=\"color:red;\"><td>%s</td><td>%s</td><td>%s</td></tr>", p.getName(), requiredVersion, installedVersion ) );
                }
            }
            sb.append( "</table><br>" );
            if( process.getVisualizationDependencies().length != 0 ) {
                sb.append( "<h3>" ).append( process.getTool().toString() ).append( " - Visualization" ).append( "</h3>" );
                sb.append( "<table style=\"width:100%\"><tr>" );
                sb.append( "<th>Name</th><th>Required</th><th>Installed</th></tr>" );
                for( RPackageDependency p : process.getVisualizationDependencies() ) {
                    Version v = gnur.getPackageVersion( p.getName() ).orElse( new Version( "0" ) );
                    String installedVersion = (v.getVersion().equals( "0" )) ? "None" : v.getVersion();
                    String requiredVersion = (p.getVersion().getVersion().equals( "0" )) ? "Any" : p.getVersion().getVersion();
                    if( p.getVersion().compareTo( v ) <= 0 && !installedVersion.equals( "None" ) ) {
                        sb.append( String.format( "<tr><td>%s</td><td>%s</td><td>%s</td></tr>", p.getName(), requiredVersion, installedVersion ) );
                    } else {
                        sb.append( String.format( "<tr style=\"color:red;\"><td>%s</td><td>%s</td><td>%s</td></tr>", p.getName(), requiredVersion, installedVersion ) );
                    }
                }
                sb.append( "</table><br>" );
            }
        }
        sb.append( "</body></html>" );
        return sb.toString();
    }


    /** This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        textPane = new javax.swing.JTextPane();

        jScrollPane2.setViewportView(textPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane textPane;
    // End of variables declaration//GEN-END:variables
}
