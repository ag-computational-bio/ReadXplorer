/*
 * Copyright (C) 2014 Institute for Bioinformatics and Systems Biology, University Giessen, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.cebitec.readxplorer.transcriptionanalyses.wizard;


import de.cebitec.readxplorer.api.objects.JobPanel;
import de.cebitec.readxplorer.ui.dialogmenus.ChangeListeningWizardPanel;
import de.cebitec.readxplorer.utils.GeneralUtils;
import java.util.prefs.Preferences;
import org.openide.util.NbPreferences;

import static de.cebitec.readxplorer.transcriptionanalyses.wizard.TranscriptionAnalysesWizardIterator.PROP_MAX_NUMBER_READS;
import static de.cebitec.readxplorer.transcriptionanalyses.wizard.TranscriptionAnalysesWizardIterator.PROP_MIN_NUMBER_READS;
import static de.cebitec.readxplorer.transcriptionanalyses.wizard.TranscriptionAnalysesWizardIterator.PROP_WIZARD_NAME;


/**
 * Panel for showing all available options for the normalization (TPM and RPKM)
 * calculation.
 * <p>
 * @author Rolf Hilker <rhilker at cebitec.uni-bielefeld.de>
 */
public class TransAnalysesNormVisualPanel extends JobPanel {

    private static final long serialVersionUID = 1L;
    private int minReadCountValue;
    private int maxReadCountValue;


    /**
     * Panel for showing all available options for the normalization (TPM and
     * RPKM) calculation.
     */
    public TransAnalysesNormVisualPanel() {
        initComponents();
        initAdditionalComponents();
    }


    @Override
    public String getName() {
        return "TPM, RPKM & Read Count Calculation";
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        minReadCountValueField = new javax.swing.JTextField();
        minRPKMValueLabel = new javax.swing.JLabel();
        maxReadCountValueField = new javax.swing.JTextField();
        maxRPKMValueLabel = new javax.swing.JLabel();

        minReadCountValueField.setText(org.openide.util.NbBundle.getMessage(TransAnalysesNormVisualPanel.class, "TransAnalysesNormVisualPanel.minReadCountValueField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(minRPKMValueLabel, org.openide.util.NbBundle.getMessage(TransAnalysesNormVisualPanel.class, "TransAnalysesNormVisualPanel.minRPKMValueLabel.text")); // NOI18N

        maxReadCountValueField.setText(org.openide.util.NbBundle.getMessage(TransAnalysesNormVisualPanel.class, "TransAnalysesNormVisualPanel.maxReadCountValueField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(maxRPKMValueLabel, org.openide.util.NbBundle.getMessage(TransAnalysesNormVisualPanel.class, "TransAnalysesNormVisualPanel.maxRPKMValueLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(maxReadCountValueField, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(minReadCountValueField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maxRPKMValueLabel)
                    .addComponent(minRPKMValueLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minReadCountValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minRPKMValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxReadCountValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxRPKMValueLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel maxRPKMValueLabel;
    private javax.swing.JTextField maxReadCountValueField;
    private javax.swing.JLabel minRPKMValueLabel;
    private javax.swing.JTextField minReadCountValueField;
    // End of variables declaration//GEN-END:variables


    private void initAdditionalComponents() {
        minReadCountValue = Integer.parseInt( minReadCountValueField.getText() );
        maxReadCountValue = Integer.parseInt( maxReadCountValueField.getText() );

        minReadCountValueField.getDocument().addDocumentListener( createDocumentListener() );
        maxReadCountValueField.getDocument().addDocumentListener( createDocumentListener() );

        loadLastParameterSelection();
    }

    /**
     * Loads the last selected parameters into the component.
     */
    private void loadLastParameterSelection() {
        Preferences pref = NbPreferences.forModule( Object.class );
        String minNoReadsString = pref.get( PROP_WIZARD_NAME + PROP_MIN_NUMBER_READS, minReadCountValueField.getText() );
        String maxNoReadsString = pref.get( PROP_WIZARD_NAME + PROP_MAX_NUMBER_READS, maxReadCountValueField.getText() );

        minReadCountValueField.setText( minNoReadsString );
        maxReadCountValueField.setText( maxNoReadsString );

    }


    /**
     * Checks if all required information to start the normalization (TPM and
     * RPKM) and read count analysis is set.
     */
    @Override
    public boolean isRequiredInfoSet() {
        boolean isValidated = true;
        if( GeneralUtils.isValidIntegerInput( minReadCountValueField.getText() ) ) {
            this.minReadCountValue = Integer.parseInt( minReadCountValueField.getText() );
        } else {
            isValidated = false;
        }
        if( GeneralUtils.isValidPositiveIntegerInput( maxReadCountValueField.getText() ) ) {
            this.maxReadCountValue = Integer.parseInt( maxReadCountValueField.getText() );
        } else {
            isValidated = false;
        }

        firePropertyChange( ChangeListeningWizardPanel.PROP_VALIDATE, null, isValidated );
        return isValidated;
    }


    /**
     * @return Maximum number of read counts for features to be listed in the
     * result.
     */
    public int getMaxReadCount() {
        return maxReadCountValue;
    }


    /**
     * @return Minimum number of read counts for features to be listed in the
     *         result.
     */
    public int getMinReadCount() {
        return minReadCountValue;
    }


}
