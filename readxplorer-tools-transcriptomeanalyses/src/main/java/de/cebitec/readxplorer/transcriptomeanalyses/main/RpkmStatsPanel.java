
package de.cebitec.readxplorer.transcriptomeanalyses.main;


import java.util.HashMap;
import org.openide.util.NbBundle;


/**
 * Panel for showing the the statistics of a result of filtered features.
 *
 * @author Rolf Hilker <rhilker at cebitec.uni-bielefeld.de>
 */
public class RpkmStatsPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;

    private final HashMap<String, Integer> returnedFeaturesStatsMap;


    /**
     * Creates new form RpkmStatsPanel
     *
     * @param returnedFeaturesStatsMap statistics to display
     */
    public RpkmStatsPanel( HashMap<String, Integer> returnedFeaturesStatsMap ) {
        this.returnedFeaturesStatsMap = returnedFeaturesStatsMap;
        this.initComponents();
        this.initAdditionalComponents();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        returnedFeatureStatsScrollpane = new javax.swing.JScrollPane();
        returnedFeatureStatsTable = new javax.swing.JTable();

        returnedFeatureStatsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Count Type", "Count"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        returnedFeatureStatsScrollpane.setViewportView(returnedFeatureStatsTable);
        if (returnedFeatureStatsTable.getColumnModel().getColumnCount() > 0) {
            returnedFeatureStatsTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(RpkmStatsPanel.class, "RpkmStatsPanel.returnedFeatureStatsTable.columnModel.title0")); // NOI18N
            returnedFeatureStatsTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(RpkmStatsPanel.class, "RpkmStatsPanel.returnedFeatureStatsTable.columnModel.title1")); // NOI18N
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(returnedFeatureStatsScrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(returnedFeatureStatsScrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane returnedFeatureStatsScrollpane;
    private javax.swing.JTable returnedFeatureStatsTable;
    // End of variables declaration//GEN-END:variables


    private void initAdditionalComponents() {
        double mappingCount = this.returnedFeaturesStatsMap.get( ResultPanelTranscriptionStart.MAPPINGS_COUNT );
        double meanMappingLength = this.returnedFeaturesStatsMap.get( ResultPanelTranscriptionStart.AVERAGE_MAPPINGS_LENGTH );
        double mappingsPerMio = this.returnedFeaturesStatsMap.get( ResultPanelTranscriptionStart.MAPPINGS_MILLION );
        double backgroundThreshold = this.returnedFeaturesStatsMap.get( ResultPanelTranscriptionStart.BACKGROUND_THRESHOLD_MIN_STACKSIZE );
        returnedFeatureStatsTable.setModel( new javax.swing.table.DefaultTableModel(
                new Object[][]{
                    { ResultPanelRPKM.RETURNED_FEATURES, this.returnedFeaturesStatsMap.get( ResultPanelRPKM.RETURNED_FEATURES ) },
                    { ResultPanelRPKM.FEATURES_TOTAL, this.returnedFeaturesStatsMap.get( ResultPanelRPKM.FEATURES_TOTAL ) },
                    { "Mapping Statistics", "" },
                    { ResultPanelTranscriptionStart.MAPPINGS_COUNT,
                      String.valueOf( mappingCount ) },
                    { ResultPanelTranscriptionStart.AVERAGE_MAPPINGS_LENGTH, String.valueOf( meanMappingLength ) },
                    { ResultPanelTranscriptionStart.MAPPINGS_MILLION,
                      String.valueOf( mappingsPerMio ) },
                    { ResultPanelTranscriptionStart.BACKGROUND_THRESHOLD_MIN_STACKSIZE,
                      String.valueOf( backgroundThreshold ) }
                },
                new String[]{
                    NbBundle.getMessage( RpkmStatsPanel.class, "RpkmStatsPanel.returnedFeatureStatsTable.columnModel.title0" ),
                    NbBundle.getMessage( RpkmStatsPanel.class, "RpkmStatsPanel.returnedFeatureStatsTable.columnModel.title1" )
                } ) {
                    private static final long serialVersionUID = 1L;
                    Class<?>[] types = new Class<?>[]{
                        java.lang.String.class, java.lang.String.class
                    };
                    boolean[] canEdit = new boolean[]{
                        false, false
                    };


                    @Override
                    public Class<?> getColumnClass( int columnIndex ) {
                        return types[columnIndex];
                    }


                    @Override
                    public boolean isCellEditable( int rowIndex, int columnIndex ) {
                        return canEdit[columnIndex];
                    }


                } );
    }


}
