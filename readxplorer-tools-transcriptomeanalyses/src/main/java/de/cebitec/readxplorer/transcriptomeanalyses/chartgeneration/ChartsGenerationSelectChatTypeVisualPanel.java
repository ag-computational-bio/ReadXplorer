/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package de.cebitec.readxplorer.transcriptomeanalyses.chartgeneration;


import de.cebitec.readxplorer.transcriptomeanalyses.verifier.IntegerVerifier;
import javax.swing.JPanel;


public final class ChartsGenerationSelectChatTypeVisualPanel extends JPanel {

    /**
     * Creates new form ChartsGenerationSelectChatTypeVisualPanel
     */
    public ChartsGenerationSelectChatTypeVisualPanel() {
        initComponents();
        lengthOfAnalyzedRegionLabel.setEnabled( false );
        rangeOfUpstreamSeqTF.setEditable( false );
        rangeOfUpstreamSeqTF.setInputVerifier( new IntegerVerifier( rangeOfUpstreamSeqTF ) );
        gaToCtCB.setEnabled( false );
        gcToAtCB.setEnabled( false );
        biningCB.setEnabled( false );
        biningSizeTF.setEnabled( false );
        biningSizeTF.setInputVerifier( new IntegerVerifier( biningSizeTF ) );
    }


    @Override
    public String getName() {
        return "Chart-type selection";
    }


    /**
     * Returns the length of upstream sequence for the base distribution plot.
     *
     * @return upstream sequence length
     */
    public Integer getRangeOfUpstrSeq() {
        return Integer.valueOf( this.rangeOfUpstreamSeqTF.getText() );
    }


    /**
     *
     * @return <true> if GA content analysis is selected else <false>
     */
    public boolean isDistOfGaCtSelected() {
        return gaToCtCB.isSelected();
    }


    /**
     *
     * @return <true> if GC content analysis is selected else <false>
     */
    public boolean isDistOfGcATSelected() {
        return gcToAtCB.isSelected();
    }


    /**
     *
     * @return <true> if bining of 5'-UTR length is selected else <false>
     */
    public boolean isBiningSelected() {
        return biningCB.isSelected();
    }


    /**
     *
     * @return the binning size
     */
    public Integer getBiningSize() {
        return Integer.parseInt( biningSizeTF.getText() );
    }


    /**
     *
     * @return <true> if base distribution plot was choosen, else <false>
     */
    public boolean isBaseDistribution() {
        return this.baseDistrPlotCB.isSelected();
    }


    /**
     *
     * @return <true> if absolute frequency of 5'-UTR length distribution was
     *         choosen, else <false>
     */
    public boolean isAbsoluteFrequency() {
        return this.absoluteFrequencyOfupstreamLengthCB.isSelected();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        baseDistrPlotCB = new javax.swing.JCheckBox();
        absoluteFrequencyOfupstreamLengthCB = new javax.swing.JCheckBox();
        rangeOfUpstreamSeqTF = new javax.swing.JTextField();
        lengthOfAnalyzedRegionLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        gaToCtCB = new javax.swing.JCheckBox();
        gcToAtCB = new javax.swing.JCheckBox();
        biningCB = new javax.swing.JCheckBox();
        biningSizeTF = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(baseDistrPlotCB, org.openide.util.NbBundle.getMessage(ChartsGenerationSelectChatTypeVisualPanel.class, "ChartsGenerationSelectChatTypeVisualPanel.baseDistrPlotCB.text")); // NOI18N
        baseDistrPlotCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baseDistrPlotCBActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(absoluteFrequencyOfupstreamLengthCB, org.openide.util.NbBundle.getMessage(ChartsGenerationSelectChatTypeVisualPanel.class, "ChartsGenerationSelectChatTypeVisualPanel.absoluteFrequencyOfupstreamLengthCB.text")); // NOI18N
        absoluteFrequencyOfupstreamLengthCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                absoluteFrequencyOfupstreamLengthCBActionPerformed(evt);
            }
        });

        rangeOfUpstreamSeqTF.setText(org.openide.util.NbBundle.getMessage(ChartsGenerationSelectChatTypeVisualPanel.class, "ChartsGenerationSelectChatTypeVisualPanel.rangeOfUpstreamSeqTF.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lengthOfAnalyzedRegionLabel, org.openide.util.NbBundle.getMessage(ChartsGenerationSelectChatTypeVisualPanel.class, "ChartsGenerationSelectChatTypeVisualPanel.lengthOfAnalyzedRegionLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(gaToCtCB, org.openide.util.NbBundle.getMessage(ChartsGenerationSelectChatTypeVisualPanel.class, "ChartsGenerationSelectChatTypeVisualPanel.gaToCtCB.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(gcToAtCB, org.openide.util.NbBundle.getMessage(ChartsGenerationSelectChatTypeVisualPanel.class, "ChartsGenerationSelectChatTypeVisualPanel.gcToAtCB.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(biningCB, org.openide.util.NbBundle.getMessage(ChartsGenerationSelectChatTypeVisualPanel.class, "ChartsGenerationSelectChatTypeVisualPanel.biningCB.text")); // NOI18N
        biningCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                biningCBActionPerformed(evt);
            }
        });

        biningSizeTF.setText(org.openide.util.NbBundle.getMessage(ChartsGenerationSelectChatTypeVisualPanel.class, "ChartsGenerationSelectChatTypeVisualPanel.biningSizeTF.text")); // NOI18N
        biningSizeTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                biningSizeTFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(baseDistrPlotCB)
                                    .addComponent(absoluteFrequencyOfupstreamLengthCB)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(gaToCtCB)
                                                .addGap(18, 18, 18)
                                                .addComponent(gcToAtCB))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lengthOfAnalyzedRegionLabel)
                                                .addGap(18, 18, 18)
                                                .addComponent(rangeOfUpstreamSeqTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(biningCB)
                        .addGap(18, 18, 18)
                        .addComponent(biningSizeTF, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(baseDistrPlotCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lengthOfAnalyzedRegionLabel)
                    .addComponent(rangeOfUpstreamSeqTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gaToCtCB)
                    .addComponent(gcToAtCB))
                .addGap(9, 9, 9)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(absoluteFrequencyOfupstreamLengthCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(biningCB)
                    .addComponent(biningSizeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void baseDistrPlotCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baseDistrPlotCBActionPerformed
        if( this.baseDistrPlotCB.isSelected() ) {
            lengthOfAnalyzedRegionLabel.setEnabled( true );
            rangeOfUpstreamSeqTF.setEditable( true );
            gaToCtCB.setEnabled( true );
            gcToAtCB.setEnabled( true );

            // deselect all other
            absoluteFrequencyOfupstreamLengthCB.setSelected( false );
            biningCB.setSelected( false );
            biningSizeTF.setEnabled( false );
        }
        else {
            lengthOfAnalyzedRegionLabel.setEnabled( false );
            rangeOfUpstreamSeqTF.setEditable( false );
            gaToCtCB.setEnabled( false );
            gcToAtCB.setEnabled( false );
        }
    }//GEN-LAST:event_baseDistrPlotCBActionPerformed

    private void absoluteFrequencyOfupstreamLengthCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_absoluteFrequencyOfupstreamLengthCBActionPerformed
        if( absoluteFrequencyOfupstreamLengthCB.isSelected() ) {
            biningCB.setEnabled( true );
            // deselect all other
            baseDistrPlotCB.setSelected( false );
        }
        else {
            biningCB.setEnabled( false );
//            biningSizeTF.setEnabled(false);
//            biningLeaderlessIntoZeroBinCB.setEnabled(false);
        }
    }//GEN-LAST:event_absoluteFrequencyOfupstreamLengthCBActionPerformed

    private void biningSizeTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_biningSizeTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_biningSizeTFActionPerformed

    private void biningCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_biningCBActionPerformed
        if( biningCB.isSelected() ) {
            biningSizeTF.setEnabled( true );
        }
        else {
            biningSizeTF.setEnabled( false );
        }
    }//GEN-LAST:event_biningCBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox absoluteFrequencyOfupstreamLengthCB;
    private javax.swing.JCheckBox baseDistrPlotCB;
    private javax.swing.JCheckBox biningCB;
    private javax.swing.JTextField biningSizeTF;
    private javax.swing.JCheckBox gaToCtCB;
    private javax.swing.JCheckBox gcToAtCB;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lengthOfAnalyzedRegionLabel;
    private javax.swing.JTextField rangeOfUpstreamSeqTF;
    // End of variables declaration//GEN-END:variables
}
