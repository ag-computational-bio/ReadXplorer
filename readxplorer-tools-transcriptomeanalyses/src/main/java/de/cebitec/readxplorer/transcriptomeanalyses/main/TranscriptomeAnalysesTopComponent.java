
package de.cebitec.readxplorer.transcriptomeanalyses.main;


import de.cebitec.readxplorer.utils.TabWithCloseX;
import java.awt.event.ContainerEvent;
import java.awt.event.ContainerListener;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;


/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//de.cebitec.readxplorer.transcriptomeanalyses//TranscriptomeAnalysesTopComponent//EN",
    autostore = false )
@TopComponent.Description(
    preferredID = "TranscriptomeAnalysesTopComponent",
    //iconBase="SET/PATH/TO/ICON/HERE",
    persistenceType = TopComponent.PERSISTENCE_ALWAYS )
@TopComponent.Registration( mode = "output", openAtStartup = false )
@ActionID( category = "Window", id = "de.cebitec.readxplorer.transcriptomeanalyses.TranscriptomeAnalysesTopComponent" )
@ActionReference( path = "Menu/Window" /*, position = 333 */ )
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_TranscriptomeAnalysesTopComponentAction",
    preferredID = "TranscriptomeAnalysesTopComponent" )
@Messages( {
    "CTL_TranscriptomeAnalysesTopComponentAction=TranscriptomeAnalysesTopComponent",
    "CTL_TranscriptomeAnalysesTopComponent=Analyses Result Window",
    "HINT_TranscriptomeAnalysesTopComponent=This is a TranscriptomeAnalysesTopComponent window"
} )
public final class TranscriptomeAnalysesTopComponent extends TopComponent {


    private static final long serialVersionUID = 1L;
    public static final String PREFERRED_ID = "TranscriptomeAnalysesTopComponent";


    /**
     * TopComponent for displaying all gui elements belonging to the
     * transcription analyses.
     */
    public TranscriptomeAnalysesTopComponent() {


        initComponents();
        setName( Bundle.CTL_TranscriptomeAnalysesTopComponent() );
        setToolTipText( Bundle.HINT_TranscriptomeAnalysesTopComponent() );
        putClientProperty( TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE );

        // add listener to close TopComponent when no tabs are shown
        this.analysesTabbedPane.addContainerListener( new ContainerListener() {
            @Override
            public void componentAdded( ContainerEvent e ) {
            }


            @Override
            public void componentRemoved( ContainerEvent e ) {
                if( analysesTabbedPane.getTabCount() == 0 ) {
                    WindowManager.getDefault().findTopComponent( PREFERRED_ID ).close();
                }
            }


        } );

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        analysesTabbedPane = new javax.swing.JTabbedPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(analysesTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(analysesTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane analysesTabbedPane;
    // End of variables declaration//GEN-END:variables
     @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }


    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }


    void writeProperties( java.util.Properties p ) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty( "version", "1.0" );
        // TODO store your settings
    }


    void readProperties( java.util.Properties p ) {
        String version = p.getProperty( "version" );
        // TODO read your settings according to their version
    }


    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }


    /**
     * This method needs to be called in order to open a new tab for
     * transcription analyses. Make sure to call {@link setAnalysisContext()}
     * first in order to display the correct context for the analysis result.
     * <p>
     * @param panelName   title of the new tab to create
     * @param resultPanel the panel to place in the new tab
     */
    public void openAnalysisTab( final String panelName, final JPanel resultPanel ) { //TranscriptionAnalysesPanel transAnalysisPanel,
        SwingUtilities.invokeLater( new Runnable() {

            @Override
            public void run() {
                analysesTabbedPane.add( panelName, resultPanel );
                analysesTabbedPane.setTabComponentAt( analysesTabbedPane.getTabCount() - 1, new TabWithCloseX( analysesTabbedPane ) );
                analysesTabbedPane.setSelectedIndex( analysesTabbedPane.getTabCount() - 1 );
            }


        } );
    }


    /**
     * @return true, if this component already contains other components, false
     *         otherwise.
     */
    public boolean hasComponents() {
        return this.analysesTabbedPane.getComponentCount() > 0;
    }


}
