/*
 * Copyright (C) 2014 Institute for Bioinformatics and Systems Biology, University Giessen, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.cebitec.readxplorer.ui.importer.datatable;


import de.cebitec.readxplorer.api.objects.JobPanel;
import de.cebitec.readxplorer.databackend.connector.ProjectConnector;
import de.cebitec.readxplorer.databackend.dataobjects.PersistentReference;
import de.cebitec.readxplorer.parser.tables.CsvPreferenceForUsers;
import de.cebitec.readxplorer.parser.tables.CsvTableParser;
import de.cebitec.readxplorer.parser.tables.TableParserI;
import de.cebitec.readxplorer.parser.tables.TableType;
import de.cebitec.readxplorer.parser.tables.XlsTranscriptomeTableParser;
import de.cebitec.readxplorer.ui.dialogmenus.ChangeListeningWizardPanel;
import de.cebitec.readxplorer.utils.filechooser.ReadXplorerFileChooser;
import java.awt.Graphics;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ScrollPaneConstants;
import org.openide.util.NbBundle;
import org.supercsv.prefs.CsvPreference;


/**
 * Creates a panel for displaying the selection of different table parsers and
 * their options.
 * <p>
 * @author Rolf Hilker <rolf.hilker at mikrobio.med.uni-giessen.de>
 */
public final class ImportTableVisualPanel extends JobPanel {

    private static final long serialVersionUID = 1L;

    private String fileLocation;
    private String fileLocationStatsCsv;
    private final TableParserI[] availableParsers = { new CsvTableParser(), new XlsTranscriptomeTableParser() };


    /**
     * Creates a panel for displaying the selection of different table parsers
     * and their options.
     */
    public ImportTableVisualPanel() {
        initComponents();
        statsAndParamsButton.setEnabled( false );
        statsAndParamsFileTextField.setEnabled( false );
        this.descriptionScrollPane.setVerticalScrollBarPolicy( ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER );
    }


    @NbBundle.Messages( "StepName=Choose table parser" )
    @Override
    public String getName() {
        return Bundle.StepName();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        descriptionScrollPane = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        tableComboBox = new javax.swing.JComboBox<>(new javax.swing.DefaultComboBoxModel<>(de.cebitec.readxplorer.parser.tables.TableType.values()));
        fileTextField = new javax.swing.JTextField();
        fileButton = new javax.swing.JButton();
        de.cebitec.readxplorer.databackend.dataobjects.PersistentReference[] refArray = new de.cebitec.readxplorer.databackend.dataobjects.PersistentReference[0];
        refArray = ProjectConnector.getInstance().getReferences().toArray(refArray);
        refComboBox = new javax.swing.JComboBox<>(new DefaultComboBoxModel<>(refArray));
        tableLabel = new javax.swing.JLabel();
        fileLabel = new javax.swing.JLabel();
        refLabel = new javax.swing.JLabel();
        delimiterCheckBox = new javax.swing.JCheckBox();
        csvPrefComboBox = new javax.swing.JComboBox<>(CsvPreferenceForUsers.values());
        parserLabel = new javax.swing.JLabel();
        parserComboBox = new javax.swing.JComboBox<>(availableParsers);
        statsAndParamsFileTextField = new javax.swing.JTextField();
        statsAndParamsButton = new javax.swing.JButton();

        descriptionTextArea.setEditable(false);
        descriptionTextArea.setColumns(20);
        descriptionTextArea.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setRows(5);
        descriptionTextArea.setText(org.openide.util.NbBundle.getMessage(ImportTableVisualPanel.class, "ImportTableVisualPanel.descriptionTextArea.text")); // NOI18N
        descriptionTextArea.setWrapStyleWord(true);
        descriptionScrollPane.setViewportView(descriptionTextArea);

        tableComboBox.setSelectedIndex(0);
        tableComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableComboBoxActionPerformed(evt);
            }
        });

        fileTextField.setEditable(false);
        fileTextField.setText(org.openide.util.NbBundle.getMessage(ImportTableVisualPanel.class, "ImportTableVisualPanel.fileTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(fileButton, org.openide.util.NbBundle.getMessage(ImportTableVisualPanel.class, "ImportTableVisualPanel.fileButton.text")); // NOI18N
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        refComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(ImportTableVisualPanel.class, "ImportTableVisualPanel.refComboBox.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(tableLabel, org.openide.util.NbBundle.getMessage(ImportTableVisualPanel.class, "ImportTableVisualPanel.tableLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(fileLabel, org.openide.util.NbBundle.getMessage(ImportTableVisualPanel.class, "ImportTableVisualPanel.fileLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(refLabel, org.openide.util.NbBundle.getMessage(ImportTableVisualPanel.class, "ImportTableVisualPanel.refLabel.text")); // NOI18N

        delimiterCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(delimiterCheckBox, org.openide.util.NbBundle.getMessage(ImportTableVisualPanel.class, "ImportTableVisualPanel.delimiterCheckBox.text")); // NOI18N
        delimiterCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delimiterCheckBoxActionPerformed(evt);
            }
        });

        csvPrefComboBox.setVisible(true);

        org.openide.awt.Mnemonics.setLocalizedText(parserLabel, org.openide.util.NbBundle.getMessage(ImportTableVisualPanel.class, "ImportTableVisualPanel.parserLabel.text")); // NOI18N

        tableComboBox.setSelectedIndex(0);
        parserComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parserComboBoxActionPerformed(evt);
            }
        });

        statsAndParamsFileTextField.setEditable(false);
        statsAndParamsFileTextField.setText(org.openide.util.NbBundle.getMessage(ImportTableVisualPanel.class, "ImportTableVisualPanel.statsAndParamsFileTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(statsAndParamsButton, org.openide.util.NbBundle.getMessage(ImportTableVisualPanel.class, "ImportTableVisualPanel.statsAndParamsButton.text")); // NOI18N
        statsAndParamsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statsAndParamsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(csvPrefComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(descriptionScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(refComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(parserLabel)
                            .addComponent(tableLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tableComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(parserComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(refLabel)
                            .addComponent(fileLabel)
                            .addComponent(delimiterCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(statsAndParamsFileTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fileTextField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(fileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(statsAndParamsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(4, 4, 4)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(descriptionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parserLabel)
                    .addComponent(parserComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tableLabel)
                    .addComponent(tableComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(refLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statsAndParamsFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statsAndParamsButton))
                .addGap(14, 14, 14)
                .addComponent(delimiterCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(csvPrefComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        TableParserI currentParser = (TableParserI) parserComboBox.getSelectedItem();
        ReadXplorerFileChooser chooser = new ReadXplorerFileChooser( currentParser.getFileExtensions(), currentParser.getInputFileDescription() ) {
            private static final long serialVersionUID = 1L;


            @Override
            public void save( String fileLocation ) {
                throw new UnsupportedOperationException( "Only opening is supported by this file chooser." );
            }


            @Override
            public void open( String fileLocation ) {
                ImportTableVisualPanel.this.fileLocation = fileLocation;
            }


        };
        chooser.openFileChooser( ReadXplorerFileChooser.OPEN_DIALOG );
        this.fileTextField.setText( fileLocation );
        this.isRequiredInfoSet();
    }//GEN-LAST:event_fileButtonActionPerformed

    private void delimiterCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delimiterCheckBoxActionPerformed
        this.csvPrefComboBox.setVisible( !delimiterCheckBox.isSelected() );
    }//GEN-LAST:event_delimiterCheckBoxActionPerformed

    private void parserComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parserComboBoxActionPerformed
        this.fileLocation = "";
        this.fileTextField.setText( org.openide.util.NbBundle.getMessage( ImportTableVisualPanel.class, "ImportTableVisualPanel.fileTextField.text" ) );
        boolean isCsvParser = (this.parserComboBox.getSelectedItem() instanceof CsvTableParser);
        this.csvPrefComboBox.setVisible( isCsvParser && !this.delimiterCheckBox.isSelected() );
        this.delimiterCheckBox.setVisible( isCsvParser );
    }//GEN-LAST:event_parserComboBoxActionPerformed

    private void tableComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableComboBoxActionPerformed

        boolean isCsvParser = (this.parserComboBox.getSelectedItem() instanceof CsvTableParser);
        if( isCsvParser &&
                 ((TableType) tableComboBox.getSelectedItem() == TableType.OPERON_DETECTION_JR ||
             (TableType) tableComboBox.getSelectedItem() == TableType.NOVEL_TRANSCRIPT_DETECTION_JR ||
             (TableType) tableComboBox.getSelectedItem() == TableType.RPKM_ANALYSIS_JR ||
             (TableType) tableComboBox.getSelectedItem() == TableType.TSS_DETECTION_JR) ) {
            statsAndParamsButton.setEnabled( true );
            statsAndParamsFileTextField.setEnabled( true );
        } else {
            statsAndParamsButton.setEnabled( false );
            statsAndParamsFileTextField.setEnabled( false );
        }

    }//GEN-LAST:event_tableComboBoxActionPerformed

    private void statsAndParamsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statsAndParamsButtonActionPerformed
        TableParserI currentParser = (TableParserI) parserComboBox.getSelectedItem();
        ReadXplorerFileChooser chooser = new ReadXplorerFileChooser( currentParser.getFileExtensions(), currentParser.getInputFileDescription() ) {
            private static final long serialVersionUID = 1L;


            @Override
            public void save( String fileLocation ) {
                throw new UnsupportedOperationException( "Only opening is supported by this file chooser." );
            }


            @Override
            public void open( String fileLocation ) {
                ImportTableVisualPanel.this.fileLocationStatsCsv = fileLocation;
            }


        };
        chooser.openFileChooser( ReadXplorerFileChooser.OPEN_DIALOG );
        this.statsAndParamsFileTextField.setText( fileLocationStatsCsv );
        this.isRequiredInfoSet();
    }//GEN-LAST:event_statsAndParamsButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<CsvPreferenceForUsers> csvPrefComboBox;
    private javax.swing.JCheckBox delimiterCheckBox;
    private javax.swing.JScrollPane descriptionScrollPane;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JButton fileButton;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JTextField fileTextField;
    private javax.swing.JComboBox<TableParserI> parserComboBox;
    private javax.swing.JLabel parserLabel;
    private javax.swing.JComboBox<de.cebitec.readxplorer.databackend.dataobjects.PersistentReference> refComboBox;
    private javax.swing.JLabel refLabel;
    private javax.swing.JButton statsAndParamsButton;
    private javax.swing.JTextField statsAndParamsFileTextField;
    private javax.swing.JComboBox<de.cebitec.readxplorer.parser.tables.TableType> tableComboBox;
    private javax.swing.JLabel tableLabel;
    // End of variables declaration//GEN-END:variables


    @Override
    public boolean isRequiredInfoSet() {
        boolean isValidated = tableComboBox.getSelectedIndex() > -1 && refComboBox.getSelectedIndex() > -1 &&
                 fileLocation != null && !fileLocation.isEmpty();
        firePropertyChange( ChangeListeningWizardPanel.PROP_VALIDATE, null, isValidated );
        return isValidated;
    }


    /**
     * @return The table type selected in this panel.
     */
    public TableType getSelectedTableType() {
        return (TableType) this.tableComboBox.getSelectedItem();
    }


    /**
     * @return The file location of the file containing the table to import.
     */
    public String getFileLocation() {
        return fileLocation;
    }


    /**
     * @return The file location of the file containing the table to import.
     */
    public String getStatsFileLocation() {
        return fileLocationStatsCsv;
    }


    /**
     * @return The reference for which the table shall be imported.
     */
    public PersistentReference getReference() {
        return (PersistentReference) refComboBox.getSelectedItem();
    }


    /**
     * @return The currently selected CsvPreference.
     */
    public CsvPreference getCsvPref() {
        return ((CsvPreferenceForUsers) this.csvPrefComboBox.getSelectedItem()).getCsvPref();
    }


    /**
     * @return <code>true</code>, if the delimiter shall be detected
     *         automatically, <code>false</code>, if the delimiter was selected
     *         by the user.
     */
    public boolean isAutodetectDelimiter() {
        return this.delimiterCheckBox.isSelected();
    }


    /**
     * @return The selected table parser to use.
     */
    public TableParserI getParser() {
        return (TableParserI) this.parserComboBox.getSelectedItem();
    }


    @Override
    public void paint( Graphics g ) {
        super.paint( g );
        this.csvPrefComboBox.setVisible( !delimiterCheckBox.isSelected() );
    }


}
